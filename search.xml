<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2024/03/18/CSS%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>CSS当中的动画与之前所学习的过渡+变幻非常相像，但是仍然有一些不同点。首先过渡+变幻虽然可以实现某一个元素的动画效果，但是它仍然存在以下几个缺点</p>
<ol>
<li>过渡的效果必须要手动的去触发，不能自动执行</li>
<li>过渡的效果一次触发只能执行一次过渡，不能够重复或多次的执行</li>
</ol>
<p>正因为存在上面的问题，所以就出现了动画这一种技术 ，它可以不需要手动触发而进行自动执行，可以重复的执行多次</p>
<p>如果要使用一个动画效果，那么必须要先定义这一个动画</p>
<h3 id="动画的定义"><a href="#动画的定义" class="headerlink" title="动画的定义"></a>动画的定义</h3><p>在CSS里面，动画的定义使用<code>@keyframes</code>来完成，具体语法格式如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    <span class="selector-tag">form</span>&#123;</span><br><span class="line">        <span class="comment">/*CSS代码 */</span></span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="comment">/*CSS代码 */</span></span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>from代表动画开始的时候，to代表动画结束的时候</p>
</blockquote>
<p>动画在定义的时候除了通过from与to来表示动画的开始与结束状态以外，还可以通过百分比来表示动画进度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    <span class="keyword">@keyframes</span> a&#123;</span><br><span class="line">        <span class="number">0%</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">20%</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">300deg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">100%</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以像下面这种方式来进行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> a&#123;</span><br><span class="line">    <span class="number">0%</span>,<span class="number">20%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*20%&#123;</span></span><br><span class="line"><span class="comment">    transform: rotateZ(0deg);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="number">21%</span>,<span class="number">40%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*40%&#123;</span></span><br><span class="line"><span class="comment">    transform: rotateZ(45deg);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这就说明 动画在0%和20%的时候它的状态是一样的</p>
</blockquote>
<h3 id="动画的属性"><a href="#动画的属性" class="headerlink" title="动画的属性"></a>动画的属性</h3><p>一个动画定义好了以后就需要通过调用来实现动画效果，动画的调用主要是通过下面几个属性来完成的</p>
<ol>
<li><code>animation-name</code>代表动画的名称</li>
<li><code>animation-duration</code>代表动画执行一次所需要的时间</li>
<li><code>animation-iteration-count</code>动画重复的次数，后面接一个数字代表执行次数，如果需要运行一直执行则需要填写<code>infinite</code>这个值，这个值代表无穷大,默认执行一次<font color="red">【默认值】</font></li>
<li><code>animation-timing-function</code>动画执行的效果，linear代表匀速，ease<font color="red">【默认值】</font></li>
<li><code>animation-delay</code>动画的沿时执行时间！<font color="red">【默认值】</font>为0</li>
<li><code>animation-play-state</code>动画的播放状态<ul>
<li><code>running</code>代表运行状态<font color="red">【默认值】</font></li>
<li><code>paused</code>代表暂停状态</li>
</ul>
</li>
<li><code>animation-fill-mode</code>动画在结束的时候保留在什么状态<ul>
<li><code>forwards</code>代表结束状态</li>
<li><code>backwards</code> 指回到开始状态<font color="red">【默认值】</font></li>
</ul>
</li>
<li><code>animation-direction</code> 规定动画播放的方向<ul>
<li><code>reverse</code>反向运行</li>
<li><code>normal</code>代表正常运行<font color="red">【默认值】</font></li>
<li><code>alternate</code>正反方向交替运行</li>
<li><code>alternate-reverse</code>反向与正向交替运行</li>
</ul>
</li>
</ol>
<p>上面的8个属性名还可以简写成一个属性名<code>animation</code>就可以了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>:动画名 执行时间 【linear】 【等待时间】  【执行次数】 【播放状态】 【播放方向】 【结束状态】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>在上面的属性值里面，第一个时间代表执行时间，第二个时间值代表等待时间</li>
<li>第一个属性值要设置成动画的名称</li>
<li>后面的属性值需要就添加，不需要可以省略</li>
<li>后面的属性值没有顺序限制，谁选谁后都可以（时间值除外）</li>
</ol>
</blockquote>
<h3 id="动画案例"><a href="#动画案例" class="headerlink" title="动画案例"></a>动画案例</h3><p><strong>轮播图案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>动画案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">639px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">426px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">5px</span> solid blue;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.imgBox</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">426px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">3195px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">animation</span>: a1 <span class="number">10s</span> infinite;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.imgBox</span>&gt;<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@keyframes</span> a1&#123;</span></span><br><span class="line"><span class="language-css">				<span class="number">0%</span>,<span class="number">15%</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">20%</span>,<span class="number">35%</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">639px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">40%</span>,<span class="number">55%</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">1278px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">60%</span>,<span class="number">75%</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">1917px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">80%</span>,<span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">2556px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-class">.imgBox</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgBox clearfix&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/CSS%E5%8F%98%E5%B9%BB/</url>
    <content><![CDATA[<h2 id="CSS变幻"><a href="#CSS变幻" class="headerlink" title="CSS变幻"></a>CSS变幻</h2><p>CSS变幻指的是页面上面的元素样式发生变幻，主要存在以下几种情况，变幻的属性使用transform</p>
<blockquote>
<p>transform的属性使用起来非常简单，它复杂的地方在它的属性值上面</p>
</blockquote>
<p>变幻起点位置属性transform-origin，这个属性标注了变幻的起始位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">transform-origin</span><span class="selector-pseudo">:left</span> <span class="attribute">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个属性不仅可以接收枚举值，还可以接收像素值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>:<span class="number">200px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在变幻的时候，要想实现3D的效果，就要创建3D空间</p>
<ul>
<li><p><code>transform-style: preserve-3d;</code></p>
</li>
<li><p>如果想看到变幻的3d效果，添加3D视距离，<code>perspective</code>这值越大，3D效果越不明显，值越小3D效果越明显</p>
<p>在我们平时去设置<code>perspective</code>值的时候，有一个小规律，如果我是X轴的旋转，我看宽度，如果是Y轴的旋转，我看高度</p>
</li>
</ul>
<p>上面的两个属性都是加在父级的</p>
<h3 id="位移变幻"><a href="#位移变幻" class="headerlink" title="位移变幻"></a>位移变幻</h3><p><strong>位移指的是元素在X轴或Y轴或Z轴进行位置的移动</strong></p>
<ol>
<li>translateX()  沿着X轴移动</li>
<li>translateY()   沿着y轴移动</li>
<li>translate(x轴移动,y轴移动)  可以同时沿着X与Y轴去移动</li>
<li>translateZ()沿着Z轴移动，但前提条件是开始3D转换效果</li>
</ol>
<p><strong>小技巧</strong>：如果在上面的三个方法里面输入百分比的单位 ，这个百分比是以当前元素的大小为百分比，X轴是以width为百分比，Y轴是以height为百分比</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    我要让这个DIV沿着X向右移动 50px</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    向下移动100px</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    * */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*-webkit-transform: translate(50px,100px);*/</span></span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>) <span class="built_in">translateY</span>(<span class="number">50px</span>);</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>与margin的区别</strong></p>
<ol>
<li>margin会挤压其它的元素，而translate不会</li>
<li>translate不占用新位置，保留原来的位置</li>
</ol>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>页面上面的某一些元素跟随某一根轴进行旋转</p>
<ol>
<li>rotateX(40deg)沿着X轴在旋转</li>
<li>rotateY()沿着Y轴去旋转</li>
<li>rotateZ()沿着Z轴去旋转</li>
<li>rotate3d(0,0,1,45deg) ，前三个值都 是0或1，分别代表是否要旋转的轴，第一个值代表X轴，第二个值代表Y轴，第三个值代表Z轴，第四个值代表旋转的角度</li>
</ol>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>缩放的默认值是1，最小值是0</p>
<ol>
<li>scaleX() 沿着X轴去缩放</li>
<li>scaleY()沿着Y轴去缩放</li>
<li>scale()同时沿着X与Y轴两个方法去缩放</li>
</ol>
<h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><ol>
<li><code>skewX(25deg)</code>沿着X轴实现在个角度的变形</li>
<li><code>skewX(25deg)</code>沿着Y轴去实现角度的变形</li>
<li><code>skew(14deg,-16deg)</code>,同时沿着X与Y轴进行变形，第一个值代表X轴的角度 ，第二个值代表Y轴角度</li>
</ol>
<h3 id="多种变幻的结合"><a href="#多种变幻的结合" class="headerlink" title="多种变幻的结合"></a>多种变幻的结合</h3><p>在CSS里面，有时候我们需要将一个元素设置为多种情况下的变幻，如我既希望它放大，还希望它旋转，还希望它位移，当这些变幻同时进行的时候，我们的属性值怎么设置呢？</p>
<p><strong>注意：</strong>如果在一个元素要设置多个变幻效果，不能同时设置多个<code>transform</code>属性</p>
<p>正确的语法如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:变幻<span class="number">1</span> 变幻<span class="number">2</span> 变幻<span class="number">3</span>.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将多个变幻的属性用空格隔开，同时赋值给<code>transform</code>这个属性</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h3 id="为什么需要CSS"><a href="#为什么需要CSS" class="headerlink" title="为什么需要CSS"></a>为什么需要CSS</h3><p>当我们在设计网页的时候，我们经常需要对网页当中的元素进行一些样式设置，通常在没有CSS的情况下，我们都是通过元素的属性来进行设置的，如下所示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">text</span>=<span class="string">&quot;red&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;green&quot;</span>&gt;</span></span><br><span class="line">    我爱北京天安门，天安门上太阳升</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--font的bgcolor没有效果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;red&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码上面，我们可以看到，body里面的text是用于设置网页当中的文字颜色，而在 font里面，我们又通过color的属性来设置文字的颜色，这个时候，我们发现都是用来设置文字的颜色，但是，他们的属性不一样，这样对开发人来说非常不方便，<font color="red">它（HTML属性）没有一个统一的标准</font></p>
<hr>
<p>同样，我们在设置网页背景的时候，我们可以在body里面设置<code>bgcolor=&quot;green&quot;</code>但是，在font标签里面，我们去通过bgcolor去设置的时候，确没有效果，这个时候，<font color="red">我们发现HTML属性它存在一定的局限性</font></p>
<hr>
<p>如果在网页当，我们要对一些元素设置同样的样式 ，这个时候，我们只能够在每一个元素上面进行属性设置</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171862810658995a?w=836&h=371&f=png&s=10925" alt="1562467801336.png"></p>
<p>如上面的表格当中，如果我要让里面的元素内容居中，这个时候，我们只能够在每一个表格元素<code>&lt;td&gt;</code>上面去设置<code>align=&#39;center&#39;</code>,这样非常麻烦，必须效率非常低</p>
<p>正是因为存在些像这样的问题，所以，我们迫切需要一种新的技术来进行我们的工作</p>
<p>这一面新的技术就是我们的CSS</p>
<hr>
<h3 id="CSS到底能够为我们做什么"><a href="#CSS到底能够为我们做什么" class="headerlink" title="CSS到底能够为我们做什么"></a>CSS到底能够为我们做什么</h3><p>首先，我们面对第一个问题，就是不同的元素都有不同的属性来设置样式的问题，CSS能否解决这个问题</p>
<p>CSS为<strong>每一个</strong>元素都添加了些共同的属性，其中就有一个属性叫<code>style</code>， 这个属性是CSS专门用于设置网页的样式的，只要是元素的样式 ，都可以通过这个属性来进行</p>
<p><em>CSS网页里面也添加了一个自己的标签 也叫<code>&lt;style&gt;</code></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>静夜思<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: pink;&quot;</span>&gt;</span>举头望明月<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: green;&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过一段上面的的代码 ，我们可以得到，如果要设置网页元素的样式 ，我们可以通过style来进行设置，如果要设置<strong>文字的颜色</strong>，我们统一使用<code>color</code>来设置就行了</p>
</blockquote>
<h3 id="CSS基础特性"><a href="#CSS基础特性" class="headerlink" title="CSS基础特性"></a>CSS基础特性</h3><h4 id="统一性"><a href="#统一性" class="headerlink" title="统一性"></a>统一性</h4><p>CSS的统一性指的是统一的属性名称style，统一的语法来进行网页元素样式的设置，这样就解决了不同的HTML元素需要使用不同的属性来去设置的问题，以后在设计网页的过程当中，只要是关于样式相关的，我们就可以直接找CSS</p>
<h4 id="便捷性"><a href="#便捷性" class="headerlink" title="便捷性"></a>便捷性</h4><p>CSS的便捷性主要体现在具备多种多样的<strong><font color="red">选择器</font></strong>，它可以通过不同的选择器来批量或单独选择某一些或某一个元素进行样式设置，这样就必须了在设计网页过程当中，同样的样式需要重复去书写</p>
<h4 id="分离性"><a href="#分离性" class="headerlink" title="分离性"></a>分离性</h4><p>CSS的分离性主要指的是在Web标准里面，我们可以把结构代码（HTML）与样式代码（CSS）进行分离</p>
<h3 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h3><p>CSS的语法非常简单，主要体现在两个部分</p>
<ol>
<li>直接写在网页元素里面的CSS样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>静夜思<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: pink;&quot;</span>&gt;</span>举头望明月<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: green;&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: red;background-color: blue;&quot;</span>&gt;</span></span><br><span class="line">        我应在江湖悠悠</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展：</p>
<blockquote>
<blockquote>
<p>在网页当中，所有元素都具备两种颜色 ，一个是前景色(color)，一个是背景色(<code>background-color</code>)在CSS里面只要看到了<code>background</code>那么，它就指的背景，有可能是背景图片，有可能是背景颜色 ，还有可能是背景定位等……</p>
</blockquote>
</blockquote>
</blockquote>
<p>   在上面的代码里面，我们都已经知道，通过对元素的style属性进行赋值，直接把CSS代码写在了网页的标签里面</p>
<p>   通过对上面的代码进行分析 ，我们发现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;CSS属性名:属性值;CSS属性名:属性值;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>单独分离出来的网页样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>颖视地上霜<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>举头望明月<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> &gt;</span>低头思故乡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面的代码 ，我们可以看到，第二种语法格式为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    选择器 &#123;</span></span><br><span class="line"><span class="language-css">        属性名:属性值;</span></span><br><span class="line"><span class="language-css">        属性名:属性值;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>CSS选择器主要是对CSS的便捷性的体现，通过不同的选择器，我们可以对不同的元素进行选取，然后再通过统一的CSS属性样式来进行设置，这个时候，选择器就显得尤为重要</p>
<p>在W3C的标准里面，规范了以下几种选择器</p>
<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>标签选择器是最简单也是最常见的一个选择器，它通过我们的标签名称来进行选择</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择所有的p标签*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选择所有的h2标签*/</span></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>使用#来进行标识，它有以下几个注意事项</p>
<ol>
<li>ID名不能重复</li>
<li>ID名不能为中文</li>
<li>ID名不能以数字开头</li>
<li>一个ID名只能被一个元素使用，一个元素也只能接收一个ID名</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>疑似地上霜<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的HTML代码如果要通过ID进行选择，则如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#p1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="class类选择器"><a href="#class类选择器" class="headerlink" title="class类选择器"></a>class类选择器</h4><p>这个选择器与ID选择器是相对的，它通过<code>.</code>来代表class</p>
<ol>
<li>ID名不能重复</li>
<li>ID名不能为中文</li>
<li>ID名不能以数字开头</li>
<li>一个元素的class属性可以接多个class名称, 一个 class名称可以被多个元素使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .代表的就是class  .a1则是class=&quot;a1&quot;*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a1 a4&quot;</span>&gt;</span>云想衣裳花想容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1 a2 a3&quot;</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>花径不曾缘客扫<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a3 a4&quot;</span>&gt;</span>无可奈何花落去<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.让第一句和第二句的文字颜色为红色</span></span><br><span class="line"><span class="comment">    2.让第二句和第三句的背景色为黄色</span></span><br><span class="line"><span class="comment">    3.让第二句和第四句的文字居中</span></span><br><span class="line"><span class="comment">    4.让第一句和第四句的字体大小变成 22px</span></span><br><span class="line"><span class="comment">    font-size:22px;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h4><p>分组选择器，我们使用<code>,</code> 来进行，在这里面，我们可以通过将不同的选择进行分组，将相同的样式组合起来，这样操作起来方便一些</p>
<ol>
<li><p>选择器的分组使用逗号</p>
</li>
<li><p>分组选择器不限定逗号左右两边的选择器类型，它可以是任何选择器</p>
</li>
<li><p>分组选择器是可以将多个选择器进行分组，不限定逗号的使用个数</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-id">#div1</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个时候，我们就使用了两个逗号来进行分组*/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>使用空格作为后代选择器，不加任何符号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">div</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*这个时候选中的就我们div里面的两个a标签*/</span></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">             有什么问题欢迎 &lt;<span class="selector-tag">a</span> href=&quot;http://www.baidu.com<span class="string">&quot;&gt;百度一下&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    	&lt;a href=&quot;</span>http://www.qq.com<span class="string">&quot;&gt;腾讯游戏&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;</span>http://www.youku.com<span class="string">&quot;&gt;优酷电话&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><p>子代选择器也是后台的一种，只是比后代更加严格，它一定子级元素，使用<code>&gt;</code>来表示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&gt;<span class="selector-tag">h2</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><p>我们使用<code>+</code>来做相邻兄弟选择器，它可以理解为紧挨着的这个元素的选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>+<span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>海上月是天上月<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>兴百姓苦<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>眼前人是心上人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> 恨不相逢未嫁时<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>似曾相识燕归来<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>代码说明</strong>：</p>
<p><code>+</code>指代的是相邻兄弟选器，这个时候，我们怎么去分析<code>div&gt;p+h2</code>这个选择器呢，它应该分为这几个部分</p>
<ol>
<li>第一步：先找到div</li>
<li>第二步：看到<code>&gt;</code> 找到所有的子级元素，这个时候，我们可以找到6个子级元素</li>
<li>第三步：又看到了p标签 ，这个时候，我们可以在上面的6人子级元素里面找到2个</li>
<li>第四步：我们又看到后面有一个<code>+</code>这个时候，我们就知道我们要找<strong>相邻兄弟</strong>，这个时候，我们找到了2 个元素，分别是<code>&lt;h1&gt;海上月是天上月&lt;/h1&gt;</code>和<code>&lt;h2&gt; 恨不相逢未嫁时&lt;/h2&gt;</code></li>
<li>第五步：最后，我们看到了h2选择器，然后在第四步的基础上面，排列不成立的，就只剩下h2一个了，这个时候，就会出现如下图的效果</li>
</ol>
</blockquote>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/1718629d7b0def2b?w=322&h=293&f=png&s=4178" alt="1562486286272.png"></p>
<blockquote>
<p>小技术：我们经常在开发过程当中，通过相邻兄弟选择器去排除前几项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 排除ul下面前三项li*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>+<span class="selector-tag">li</span>+<span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第六项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第七项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="普通兄弟选择器"><a href="#普通兄弟选择器" class="headerlink" title="普通兄弟选择器"></a>普通兄弟选择器</h4><p>普通兄弟选择器比相邻兄弟选择器更为松散一点，它不要求我们紧挨着，只要是后面的兄弟就行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*把p标签后面的h2才设置成红色*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>~<span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标哥哥学唐诗真有意思<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>离离原上草<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>春风得意马蹄急<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>疑是地上霜<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>长风破浪会有时<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下<br><img src="https://user-gold-cdn.xitu.io/2020/4/17/171862bd12135767?w=359&h=303&f=png&s=4987" alt="1562487921626.png"></p>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>属性选择器，我们使用 <code>[]</code>够进行，它根据元素的属性来进行选择</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*我们现在希望通过某一个属性去找到某一些元素*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span>       <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span>		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    昵称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span>			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    地址<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span>			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span>		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性选择器的高级用法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/*属性值开始的匹配*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-attr">[src^=<span class="string">&quot;image/&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/*属性值结束匹配*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-attr">[src$=<span class="string">&quot;.png&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-attr">[src*=<span class="string">&quot;item&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/item1.jpg&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/item2.jpg&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item3.jpg&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/kabao.png&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/wechat.png&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		1.把页在上面所有image文件夹下面的图片大小宽度设置为200px</span></span><br><span class="line"><span class="comment">		2.请将页面上面所有.png的图片高度设置成150</span></span><br><span class="line"><span class="comment">		3.请把页面上面所有 包含item的图片名称加一个边框</span></span><br><span class="line"><span class="comment">		border:1px solid black;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>^</code>代表开始匹配</li>
<li><code>$</code>代表结束匹配</li>
<li><code>*</code>代表任意位置匹配</li>
</ul>
<h4 id="伪类伪元素选择器"><a href="#伪类伪元素选择器" class="headerlink" title="伪类伪元素选择器"></a>伪类伪元素选择器</h4><p>伪类与伪元素选择器主要的集中在“伪”上面，本身可以不存在，但是如果存在，则一定会发生某一些改变</p>
<p>伪类或伪元素它主要使用的符号是<code>:</code>或<code>::</code>,符号后面接上一定的特殊效果</p>
<h5 id="常见的伪类与伪元素选择器"><a href="#常见的伪类与伪元素选择器" class="headerlink" title="常见的伪类与伪元素选择器"></a>常见的伪类与伪元素选择器</h5><ol>
<li><code>:hover</code>鼠标移动上去以后的效果</li>
<li><code>:link</code> 用于设置a标签点击以前的效果</li>
<li><code>:active</code>用于设置a标签点击的时候的效果</li>
<li><code>:visited</code>用于设置a标签链接访问以后的效果</li>
<li><code>:first-child</code>选取第一个子元素</li>
<li><code>:last-child</code>选取最后一个子元素</li>
<li><code>：nth-child(n)</code>代表选取第n个子元素</li>
</ol>
<ul>
<li><p>nth-child(even)代表选取<strong>偶数</strong>的子元素</p>
</li>
<li><p>nth-child(odd)代表选取<strong>奇数</strong>的子元素</p>
</li>
<li><p>nth-child(xn+y)分组选择功能，选每x分一个组，再取这个组里面的第y项</p>
</li>
<li><p>nth-child(-n+x)选择前x项的子元素</p>
</li>
<li><p>nth-child(n+y)排除前面的y-1面，这个演变自xn+y这种方式</p>
<p> <strong>注意</strong>： h2:nth-child(n)<strong>先找第n个元素</strong>，<strong>再去判断</strong>一下第n个元素是不是h2元素，如果是则选择器成立</p>
</li>
</ul>
<ol>
<li><p><code>:nth-of-type(n)</code>这个选择器与<code>nth-child</code>用法差不多，唯一不同的地方就是它先找元素，再去判断个数</p>
<blockquote>
<p><font color="blue"><strong>经验</strong></font>：如果子元素是同一个类型，可以优先使用<code>nth-child</code>，如果子元素是不同的类型 ，我们优先使用<code>nth-of-type</code></p>
</blockquote>
</li>
<li><p>：first-line`选取段落文字的第一行</p>
</li>
<li><p><code>:first-letter</code>选取第一个文字</p>
</li>
<li><p><code>::selection</code>它是选取以后的文字</p>
</li>
<li><p><code>:not()</code>排除，取反</p>
<hr>
</li>
<li><p><code>:checked</code>代表单选按钮或多选按钮被选中的元素</p>
</li>
<li><p><code>:focus</code>输入框获取焦点以后</p>
</li>
<li><p><code>::placeholder</code>用于设置输入框里面的提示信息的</p>
</li>
<li><p><code>:read-only</code> 用于设置只读的表单元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:read-only</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>:disabled</code>用于表单当中被禁用的元素</p>
<hr>
</li>
<li><p><code>:target</code>指代网页当中某一个元素被a标签触发以后的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#p1</span><span class="selector-pseudo">:target</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#p1&quot;</span>&gt;</span>小帅哥，快来点我呀<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line">    东边日出西边雨，道是无情却有情</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个伪元素是配置a标签以一起使用，它是目前为止，我们不通过JS就能够实现点击以后的效果的事件</p>
</li>
<li><p><code>::after</code>该伪元素会在当前元素里面的最后面去插入<code>content</code>里面的内容</p>
</li>
<li><p><code>::before</code>该伪元素会在当前元素里面的最前面去插入<code>content</code>里面的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*这个伪元素必须要与一个 属性content结合在一起使用*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">img/kabao.png</span>);</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*这晨还可以插入图片*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;那我就大发慈悲的告诉你吧&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        为了防止世界被破坏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="CSS常见样式"><a href="#CSS常见样式" class="headerlink" title="CSS常见样式"></a>CSS常见样式</h2><h3 id="特殊的标签DIV"><a href="#特殊的标签DIV" class="headerlink" title="特殊的标签DIV"></a>特殊的标签DIV</h3><p>在我们的网页里面，有一个非常特殊标签叫DIV，它可以理解成是一个盒子</p>
<ol>
<li>div标签它可以包裹任何最基础的HTML标签</li>
<li>DIV既然是一个盒子，那么，它肯定有大小，它默认的宽度是外边元素的100%,高度默认是0，但是如果里面放了元素以后，会自动撑开</li>
<li>div如果没有CSS，则在页面上面不会产生任何效果</li>
</ol>
<hr>
<h3 id="width-height属性"><a href="#width-height属性" class="headerlink" title="width/height属性"></a>width/height属性</h3><ol>
<li>width用于设置元素的宽度</li>
<li>height用于设置元素的高度</li>
</ol>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol>
<li><p><code>background-color</code>背景颜色 </p>
<blockquote>
<p>在网页里面，可接收的颜色类型有很多种，但常见的有三种</p>
<ol>
<li><p>枚举色，能够列出名子的颜色 如<code>red</code>,<code>blue</code>等</p>
</li>
<li><p>16进制色，它以#开头,后面接字符，这个字符从0开始到FF结束,如#FF0000或#998877</p>
<p>在16进制色里面，前两位数字代表红色，中间两位数字代表绿色，后面两位数字代表蓝色，在数值当中，0最小，FF最大</p>
</li>
<li><p>rgb三元色，在ui设计里面通过都会使用rgb值，我们前端可以直接配合UI来使用这个值</p>
<p>rgb(数值1,数值2,数值3),这个数值从0开始，到255结束，第一个数值代表红，第二个绿，第三个蓝</p>
</li>
</ol>
</blockquote>
</li>
<li><p><code>background-image</code> 设置背景图片</p>
<p>当背景图片小于盒子的大小的时候，它会产生一个重复的平铺</p>
</li>
<li><p><code>background-repeat</code>设置背景图片的重复平铺行为，有以下几个值</p>
</li>
</ol>
<ul>
<li>repeat代表背景图横向与纵向一起平铺，默认就是这一个值</li>
<li>repeat-x代表横向重复平铺</li>
<li>repeat-y代表纵向重复平铺</li>
<li>no-repeat不平铺</li>
</ul>
<ol>
<li><p><code>background-size</code>设置背景图的大小，第一值代表背景图片宽度，第二值代表背景图片高度</p>
</li>
<li><p><code>background-positioin</code>设置背景图片的位置，第一个值代表水平位置，第二个代表垂直位置</p>
<p>可以通过left/right/center/top/bottom等进行组合来确定背景图片的背景</p>
<p>它还可以通过具体的值来进行背景图片的定位</p>
</li>
</ol>
<p>做一个小补充：背景是<code>background</code>开头的，颜色我们有前景色和背景色，前景色是color</p>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ol>
<li><code>border</code> 就设置边框 ，后面接三个值，第一个值代表线条粗细，第二个代表线条类型，第三个代表线条颜色，这三个值是可以更换顺序的<ul>
<li>solid代表实线</li>
<li>dotted代表点线</li>
<li>dashed代表虚线</li>
<li>double代表双线</li>
</ul>
</li>
</ol>
<blockquote>
<p>上面的设置方法是一次性的设置了四个方向，其中我们在设置的过程当中，还可以分开不同的方向去设置</p>
</blockquote>
<ol>
<li>border-left设置左边的边框</li>
<li>border-right设置右边的边框</li>
<li>border-top设置上边的边框</li>
<li>border-bottom设置下边的边框</li>
</ol>
<blockquote>
<p>除了可以找到四个方向以外，我们还可以在四个方向上边单独的去设置它的线条类型，线条颜色以及线条粗细</p>
</blockquote>
<ol>
<li><p>border-*-style代表设置某一个方向的线条类型</p>
</li>
<li><p>border-*-width代表设置某一个方向的线条粗细</p>
</li>
<li><p>border-*-color代表设置某一个方向的线条颜色</p>
<blockquote>
<p>上面的*代表四个方向的left/right/top/bottom</p>
</blockquote>
</li>
</ol>
<p>在边框外边还有一层叫轮廓，属性名为outline, 设置方法与 border保持一至，但要注意，它不受圆角边框的控制</p>
<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ol>
<li><p>border-radius用于设置圆角边框，值越大，圆角越明显</p>
<p>当这个值处于直径的一半的时候，它就是一个圆</p>
<p> border-radius与边框一样，它也可以分别去设置这1~4个值</p>
<ul>
<li>如果是一个值，则四个角相同</li>
<li>如果是四个值，则一个角一个</li>
<li>如果是2个或3个值，则剩下的参照对角线</li>
</ul>
</li>
<li><p>元素还可以分开设置每一个方向，我们可以从四个角度分开来进行</p>
<ul>
<li>border-top-left-radius</li>
<li>border-top-right-radius</li>
<li>border-bottom-left-radius</li>
<li>border-bottom-right-radius</li>
</ul>
</li>
</ol>
<h3 id="字体和文字"><a href="#字体和文字" class="headerlink" title="字体和文字"></a>字体和文字</h3><ol>
<li><p><code>font-size</code>字体大小,后面接具体的值</p>
<p>font-size后面可以接多个类型的属性值</p>
<ul>
<li><p>px像素单位，网页当中默认的字体的大小是16px,<em>在谷歌浏览器里面，<font color="red">所能够显示出来的最小字体是12px</font></em></p>
</li>
<li><p>pt字号，网页当中的默认字号是12pt,要注意<code>16px=12pt</code></p>
</li>
<li><p>百分比%，以网页默认字体大小为标准</p>
</li>
<li><p>vw(viewport width)响应式字体单位，根据不同的设备宽度显示出不同的设置大小,1vw代表的就是你设备宽度*1%</p>
</li>
<li><p>rem(root element)响应式字体单位</p>
<p>root element指提是html元素，html的默认大小就是网页默认字体的大小，所以它是16px</p>
<p>1rem默认就是16px</p>
</li>
</ul>
<p>在上面的字体单位里面，我们PC端常用的就是px，移动端常用的就是vw与rem</p>
</li>
<li><p><code>font-family</code>用于设置字体样式 ，它可以使用自己上面已有的字体，也可以使用第三方字体，字体的名称最好不要用中文</p>
</li>
<li><p><code>font-weight</code>用于设置字体权重，给一个blod就会加粗，lighter把字体变细一点</p>
</li>
<li><p><code>font-style</code>用于设置类型体类，常用属性<code>italic</code>设置斜体</p>
</li>
<li><p>自定义字体</p>
<p>如果要使用自定义的字体，需要两个过程 </p>
<ul>
<li>定义自定义的字体</li>
<li>使用字体</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*自定义字体*/</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*自定义字体的名称叫什么*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>:<span class="string">&quot;biaogege&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*自定义字体的路径在什么地止*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">fonts/hksn.ttf</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;biaogege&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    我应在江湖悠悠，饮一壶浊酒</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171862c31162dc8f?w=389&h=51&f=png&s=5208" alt="1562643979037.png"></p>
</li>
<li><p><code>text-align</code>用于设置文字的排列（后期我们会重去提text-align）</p>
<blockquote>
<p>前期使用text-align可能仅仅只作用于文字的排列 ，后期还会应用到图片等一系列行内元素与行内块级元素（具体参照第四节笔记《盒子模型与元素类型》）</p>
</blockquote>
</li>
<li><p><code>text-decoration</code>用于设置文字的装饰，常用属性值如下</p>
<ul>
<li>none去掉下划线</li>
<li>underline下划线</li>
<li>overline上划线</li>
<li>line-through中线的删除线, 与del和 strike效果相同</li>
</ul>
</li>
<li><p><code>text-indent</code>设置文字的首行缩进，一般以em为单位 ，1em代表当前文字的一个字体</p>
<p>:point_right: 小提示：1rem代表一个html字体的大小,1em则代表一个当前字体的大小</p>
</li>
<li><p><code>text-shadow</code>用于设置文字的阴影，后面接4个值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">2px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个值代表文字阴影在X轴的偏移量，如果是正数则向右偏移，如果是负数则向左偏移</p>
<p>第二个值代表文字阴影在Y轴的偏移量，如果是正数则向下偏移，如果是负数是向上偏移</p>
<p>第三个值代表文字阴影的模糊度，数值越大，阴影越模糊，最小为0，如果为负数，则阴影不显示</p>
<p>第四个值代表文字阴影的颜色</p>
<blockquote>
<p>:这个属性后期在设计的时候，可能会涉及到文字的模糊效果</p>
</blockquote>
</li>
<li><p><code>text-transform</code>文字的变幻，常用的属性值如下</p>
<ul>
<li>uppercase大写字母</li>
<li>lowercase小写字母</li>
<li>capitalize 每个单词的首字母大写</li>
</ul>
</li>
<li><p><code>letter-spacing</code>字母与字母之间的间距，如果是汉字则是汉字与汉字之间的间距</p>
</li>
<li><p><code>word-spacing</code>英文里面，单词和单词之间的间距</p>
</li>
<li><p><code>line-height</code> 文字行与行之间的间距，它的值可以接收具体的像素单位 ，还可以接收em单位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="comment">/*它还可以写成 line-height:1.5*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果是以em做单位，则可以省略掉这个em*/</span></span><br><span class="line"><span class="comment">/*em就是当前这个字体的大小*/</span></span><br></pre></td></tr></table></figure>

<p>:bookmark_tabs: <strong>经验</strong>：如果文字<font color="red">只有一行</font>的情况，并且行高line-height与height设置成一样的时候，这个时候，这个文字就会呈现上下居中的效果</p>
<p>我们在布局的过程当中经常会使用这一样方式达到“上下居中”</p>
</li>
<li><p>文字溢出省略</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;    <span class="comment">/*文字不换行*/</span></span><br><span class="line">    <span class="comment">/*文字溢出来的部分*/</span></span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;    <span class="comment">/* ellipsis 省略号*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;     <span class="comment">/*溢出的部分隐藏掉*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171862c4c8b09804?w=254&h=128&f=png&s=1217" alt="1562655656367.png"></p>
<p>在文字溢出省略的过程当中，上面的三个属性<code>white-space</code>,<code>text-overflow</code>还有<code>overflow</code>要结合起来一起使用</p>
</li>
</ol>
<h3 id="table表格里面的样式"><a href="#table表格里面的样式" class="headerlink" title="table表格里面的样式"></a>table表格里面的样式</h3><p>在table里面，table本身有一些HTML属性来设置样式 ，但是进入到CSS以后，我们就再去使用这些属性样式 ，而需要使用css属性去替代</p>
<p>HTML的border属性要替换成CSS的border属性<code>border:1px solid black;</code>表格的边框需要同时设置table 以及td还有th</p>
<p>单元格与单元之间的间距 <code>cellspacing=0</code>则需要使用<code>border-collapse:collapse</code>替代</p>
<p>单元格文字align的属性则需要使用css当中的<code>text-align</code>来替换</p>
<p>单元格当中的valign属性则需要使用css当中的<code>vertical-align</code>来替代</p>
<h3 id="列表标签里面的样式"><a href="#列表标签里面的样式" class="headerlink" title="列表标签里面的样式"></a>列表标签里面的样式</h3><ol>
<li><code>list-style-type</code>设置前面的列表样式,如果设置为<code>none</code>则代表去掉样式</li>
<li><code>list-style-image</code>设置前面的图片</li>
<li><code>list-style-position</code>设置前面图片在里面(inside)名外边(outside)</li>
</ol>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>计数器只有三个属性，也分为三个步骤</p>
<ol>
<li><code>counter-reset:计数器名称 初始值</code></li>
<li><code>counter-increment：计数器名称 增量</code></li>
<li><code>content:counter(计数器名称)</code></li>
</ol>
<p><strong>注意事项</strong></p>
<ol>
<li>你要对谁计数，那么，你的初始化<code>counter-reset</code>应该在它的父级元素上面 </li>
<li>你要对谁计数，那么<code>counter-increment</code>就应该在这个元素的CSS里面</li>
<li><code>content:counter(计数器名称)</code>必须配合伪元素<code>::after/::before</code>来使用</li>
</ol>
<h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h3><p>在之前的两节里面，我们已经针对CSS的便捷性（选择器）与统一性（CSS属性）进行了学习，现在我们肯定是要通过这些学习的CSS来进行页面样式的设定与布局</p>
<p>在对HTML页面进行样式设定与布局的时候，必须要遵守一个规范，使用页面在布局的时候能够更清淅，更明了，这个规范就是盒子模型（为什么需要盒子模型的原因）</p>
<p>在网页里面，网页上面所有显示的东西都是通是结构代码 HTML来生成的，这个结构指的是元素与元素之间组成的一些特殊结构，也指每个元素<strong>内部自身的结构</strong>（盒子模型到底是什么呢）</p>
<blockquote>
<p>盒子的特性</p>
<ol>
<li>盒子有大小</li>
<li>盒子的边框肯定有粗细</li>
</ol>
</blockquote>
<p><strong>HTML元素内部的结构，我们叫盒子模型，所有的元素都具备盒子模型的特性</strong></p>
<p>有了盒子模型这个特点以后，我们前端在进行布局的时候可以更方便的对页面上面的元素进行控制</p>
<p>由内向外分别为<code>content</code>内容—-&gt;<code>padding</code>（内间距）—-&gt;<code>border边框</code>—-&gt;<code>margin</code>（外间距）</p>
<blockquote>
<p>盒子模型能够更快更方便的找出元素在网页不如的CSS特性，更方便我们调试</p>
</blockquote>
<h3 id="magin外间距"><a href="#magin外间距" class="headerlink" title="magin外间距"></a>magin外间距</h3><p>margin指的是元素与元素之间的外边的间距,它可以接收1~4属性值，针对值的不同所代表的意义也不同</p>
<p>margin在赋值的过程当中遵守如下的规范，margin有值就给值，无值就按下面的图片箭头参照赋值</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/17187725f86d8160?w=409&h=326&f=png&s=9382" alt="1562810502368.png"></p>
<p>我们在开值的时候，可以直接通过margin一个属性来赋值，但是，如果我仅仅只是要赋值某一个方向的时候，这个时候，我们推荐margin-<code>方向</code>,<code>margin-top/left/right/bottom</code></p>
<p><strong>注意：</strong></p>
<p>在margin赋值的时候，有一个特殊值需要注意auto,当我们设置<code>margin-left:auto</code>这个时候，盒子就会跑到最右边去，当我们再设置一个<code>margin-right:auto</code>盒子就会处于正中间</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:auto;</span><br><span class="line">    <span class="attribute">margin-right</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*盒子就会处于正中间*/</span></span><br></pre></td></tr></table></figure>

<p>上面的代码如果简化一下，应该写成如下形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在盒子模型里在，上下外间距默认就是0px,所以上面的代码可以进一步的简化成如下形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：以后如果要设置div(块级元素)居中，可以直接使用  <code>margin:auto</code></p>
<h3 id="margin折叠-margin穿透-问题"><a href="#margin折叠-margin穿透-问题" class="headerlink" title="margin折叠(margin穿透)问题"></a>margin折叠(margin穿透)问题</h3><blockquote>
<p>当设置在子级元素的外间距的效果体现在了父级元素上面，这种情况我们就叫margin折叠</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;    <span class="comment">/*这一行代码会引发margin的折叠*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171877274b1c6de0?w=229&h=228&f=png&s=932" alt="1562812298134.png"></p>
<blockquote>
<p>margin折叠的现象只发生在上边,它的根本原因是因为没有在外边的盒子上面去设置边框</p>
</blockquote>
<p> 解决margin折叠的有以下几种</p>
<ol>
<li>在父级元素上面设置<code>border-top: 1px solid transparent;box-sizing:border-box</code></li>
<li>在父级元素上面设置<code>overflow:hidden</code>这是一个css hack</li>
</ol>
<hr>
<h3 id="padding内间距"><a href="#padding内间距" class="headerlink" title="padding内间距"></a>padding内间距</h3><ol>
<li>padding与mragin相是同，它也有四个值，赋值方法与margin保持一致</li>
<li>padding指的是盒子的内间距</li>
<li>padding也有四个方向 ，所以它也有<code>padding-left/right/top/bottom</code></li>
<li>padding会撑大盒子，这是因为在盒子模型里面padding在border里面</li>
</ol>
<p><font color="red"><strong>思考</strong></font>：我们怎么在保证设置盒子的padding以后还保证盒子的大小不变</p>
<p>如果要保证盒子的大小不变，我们一旦设置padding以后就要去改变盒子width与height的大小，但是这样非常麻烦</p>
<p>在CSS3里面，有一个属性彻底解决了这一个问题<code>box-sizing:border-box</code></p>
<h3 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h3><p>这个属性是为了解决盒子大小规范的一个属性，这个属性有如下两个常用的值</p>
<h4 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h4><p>这个值是当前属性的默认值，这值代表盒了大小以content为标准</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;  <span class="comment">/*content大小*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;   <span class="comment">/*边框*/</span></span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的css代码里面，我们可以看到<code>width:300px</code>，这个时候，我们也看到后面给了一个 <code>box-sizing:content-box</code>这个时候主注意了width:300px指的就是content的大小</p>
<p>盒子的大小以content为标准</p>
<blockquote>
<p>300px=content</p>
</blockquote>
<h4 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h4><p>这个属性值可以保持盒子的大小设置padding不改变</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;  <span class="comment">/*content大小*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;   <span class="comment">/*边框*/</span></span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;   <span class="comment">/*重点代码*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>border-box指的是属性width:300px设置在了盒子模型的border这一层,盒子的大小以边框为标准</p>
<blockquote>
<p>300px=content+padding+border</p>
</blockquote>
<hr>
<h2 id="元素在CSS当中的表现类型"><a href="#元素在CSS当中的表现类型" class="headerlink" title="元素在CSS当中的表现类型"></a>元素在CSS当中的表现类型</h2><p>通过对HTML标签的学习，我们发现网页当中不同的HTML标签所表现出来的特点都不尽相同，通过总结，我们可以把这些HTML元素分为三类</p>
<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>块级元素（ display:block）指的是网页中类似于<code>p</code>,<code>table</code>,<code>div</code>等这些元素，这些元素我们可以看到它都独自占用一行，并且还有一些其它的特性，那么现在，我们就列举块级元素的特性</p>
<p><strong>特点：</strong></p>
<ol>
<li>块级元素独自在一行</li>
<li>块级元素可以通过width/height来设置大小</li>
<li>块级元素的居中是在当前的元素上面添加<code>margin:auto</code>，但是它的宽度不能是父级的100%</li>
<li>块级元素宽度默认是100%，高度默认为0，但是可以通过height来设置，也可以通过 里面的内容来撑高</li>
</ol>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>行内元素（display:inline）指在网页当中类似于a标签,label，span等一系列标签，它们的特点如下：</p>
<p><strong>特点：</strong></p>
<ol>
<li>默认排列在同一行</li>
<li>行内元素不能设置width与height</li>
<li>行内元素如果要实现居中则必须在其外层（父级）<strong>块级</strong>元素上面设置<code>text-align:center</code><ul>
<li>不能在自己的行内上在设置<code>text-align:center</code></li>
<li>必须是在外层的元素上面设置</li>
<li>外层元素必须是块级元素</li>
</ul>
</li>
<li>行内元素默认的宽度与高度都是0.但可以通过里面的内容来进行撑开</li>
<li>行内元素在代码里面换行以后，会在页面上面呈现出一个空格位</li>
<li>行内元素没有marign-top与margin-bottom,但有margin-left与 margin-right</li>
<li>padding-left/padding-right是有显示有效果， padding-top/padding-bottom在这里也有效果，也可以撑开自身，但是撑不开外边的块级元素</li>
<li>如果行内元素只有一行，并且行高与高度一致则上下居中</li>
</ol>
<blockquote>
<p>小技巧： 可以把网页当中的文字也看成是行内元素</p>
</blockquote>
<h3 id="行内块级元素"><a href="#行内块级元素" class="headerlink" title="行内块级元素"></a>行内块级元素</h3><p>有网页里面有些元素既具备块级元素的特点，也具备行内元素的特点，这种元素我们叫行内块级元素(display:inline-block)</p>
<ol>
<li>行内块级元素默认排在一行</li>
<li>代码如果换行页面会产生一个空格位</li>
<li>行内块级如果需要左右居中则采取与行内元素一样(inline)一样的标准，设置<code>text-align:center</code></li>
<li>如果行内块级元素也排一行，并且行高与高度保持一致，并且设置了<code>vertical-align: middle</code>则上下居中</li>
<li>默认由里面的内容来撑开宽度与高度，也可以通过width/height来设置元素的宽度与高度</li>
<li>它的margin与padding遵循标准的盒子模型</li>
</ol>
<p>:imp: <strong><font color="red">思考</font></strong>：网页当中的元素是否可以进行转换？</p>
<h3 id="元素类型的转换"><a href="#元素类型的转换" class="headerlink" title="元素类型的转换"></a>元素类型的转换</h3><p>在网页当中，不同的元素类型是可以进行相互转换的，通过属性<code>display:元素类型值</code></p>
<ul>
<li><code>display:block</code>转成块级元素</li>
<li><code>display:inline</code>转成行内元素</li>
<li><code>display:inline-block</code>转成行内块级元素</li>
</ul>
<h3 id="各种类型元素之间的包裹效果"><a href="#各种类型元素之间的包裹效果" class="headerlink" title="各种类型元素之间的包裹效果"></a>各种类型元素之间的包裹效果</h3><ol>
<li><p>块级可以包含块级，包含行内也可以包含行内与块级</p>
</li>
<li><p>行内里面最好只包含行内，不要包含行内与行内块级</p>
</li>
<li><p>行内块级元素可以包含块级，可以包含行内块级，还可以包含行内</p>
<p>它的宽度是由里面撑开的，而不是块级的100%</p>
</li>
</ol>
<p>块级 &gt;  行内块级 &gt;  行内</p>
<p>div为块级元素的典型代码，span为行内元素的典型代码</p>
<h2 id="浮动与定位"><a href="#浮动与定位" class="headerlink" title="浮动与定位"></a>浮动与定位</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="浮动的意义"><a href="#浮动的意义" class="headerlink" title="浮动的意义"></a>浮动的意义</h4><p>可以把浮动理解成一种<strong>排列的命令</strong>（它要么要左排列，要么要右排列），它向页面发送一个命令以后，页面上面的元素就要遵循这一个命令进行布局, 浮动命令可以针对任何类型的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>案例</strong>：如何将两个div排列在同一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第一种解决方案</strong>：我们可以将div2与div3转换成行内块级元素，然后再到代码里面把div2与div3的HTML写在同一行，但是这种方案有明显有局限性就是代码不能换行，后期我们进行大项目开发的时候肯定不能说代码不换行一直写下去，所以这种方案不是首选（这一种解决方案，我们采用的是标准的盒子模型原理的方式）</p>
<hr>
<p>现在为了更好的解决存在的问题，我们需要使用一种非标准（<strong>文档流</strong>）的模式（脱离标准文档流，简称脱流）</p>
<blockquote>
<p>文档流：网页在从上向下加载的这一个过程 ，我们叫文档流的生成过程</p>
<p>网页在从上向下加载的这个过程里面，如果没有其它的特殊情况，它遵循的是一个<font color="red">标准的文档流</font>（标准的盒子模型原理）</p>
</blockquote>
<p><strong>第二种解决方案</strong>:直接使用浮动来进行</p>
<h4 id="浮动的影响"><a href="#浮动的影响" class="headerlink" title="浮动的影响"></a>浮动的影响</h4><ol>
<li>浮动以后的元素对自身的影响<ul>
<li>浮动以的的块级元素宽度就不在是默认的100%了，而是由里面的内容去撑开，但是同样可以通过width/height来重新设置宽度与高度</li>
<li>浮动以后的元素不再占用之前的位置了</li>
</ul>
</li>
<li>浮动以后的元素对其它元素的影响<ul>
<li>浮动以后的元素撑不开外边的元素的高度，会照成外边元素的高度塌陷（元素脱流了）</li>
<li>浮动以后的元素对后面元素的布局会有影响</li>
</ul>
</li>
</ol>
<p><strong>注意事项：</strong>浮动以后的元素对外边的高度造成塌陷，高度会为0，浮动以后元素不受外边元素的高度影响，但是会受到宽度的约束，<u>如果宽度不够，则不能排在同一行</u></p>
<h4 id="清除浮动的影响"><a href="#清除浮动的影响" class="headerlink" title="清除浮动的影响"></a>清除浮动的影响</h4><p>为什么要清除浮动的影响，是因为浮动以后的元素会对后面元素的布局造成影响</p>
<ol>
<li><p>使用<code>clear:left/right/both</code>清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;   <span class="comment">/*直接清除左右的浮动*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><font color="red">注意事项：</font></strong>使用<code>clear：left/right/both</code>以后的元素会对margin-top造成影响，当我们设置margin-top以后会没有效果,所以，我们一般要清除浮动的时候，会使用下面的方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用css hack的方法来进行<code>overflow:hidden</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一种方式的原理是恢复了之前因为浮动造成的高度塌陷的问题，它恢复了外边盒子的高度</p>
</li>
<li><p>结合伪元素来使用清除浮动，我们会写一个特殊的样式来进行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一种方式不仅恢复了外边塌陷的高度，也清除了浮动</p>
</li>
</ol>
<hr>
<h3 id="定位position"><a href="#定位position" class="headerlink" title="定位position"></a>定位position</h3><p>定位是盒子模型的最外边一层,  盒子模型同外向内应该是5层</p>
<ol>
<li>position定位（offset）—-marign外间距—–border边框—–padding内间距—–content内容</li>
<li>在标准文档流里在，只包含两根轴（X轴与Y轴），但是，一个元素一轴定位以后以会多出一个Z轴，也就会多出一个属性(z-index)</li>
<li>一个元素一旦使用定位以后就会再多四个属性left/right/top/bottom,用这四个属性来设置四个方向偏移量</li>
</ol>
<h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>相对定位指的是页面上面的元素相对于自己原来的位置进行定位</li>
<li>相对定位不会占用新的位置，保留原来的位置</li>
<li>所有定位（除static）默认比标准文档流高一个层级（Z轴）</li>
</ol>
<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>绝对定位会脱离标准文档流，不占用原来的位置</li>
<li>绝对定位<strong>默认</strong>以浏览器为标准进行定位</li>
<li>但是，如果外层元素发现了其它的定位（relative，absolute,fixed），这个时候，就应该以外层这个定位元素来进行定位</li>
<li>它会随着浏览器滚动条的滚动而移动</li>
</ol>
<h5 id="关于子绝父相"><a href="#关于子绝父相" class="headerlink" title="关于子绝父相"></a>关于子绝父相</h5><p><font color="red">子绝父相的概念是一个狭义的概念</font></p>
<p><del>如果一个子级元素使用了绝对定位absolute，那么它的父级（外层）元素就应该使用一个相对定位来进行包裹，它是使用绝对定位的一个规范，为了防止元素以默认的浏览器为标准进行定位</del></p>
<p>一个绝对定位的元素如果外层以发现了非static的定位，那么这个元素就可以把绝对定位给拦下来</p>
<h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>脱离文档流，不占用原来的位置</li>
<li>固定定位一定以浏览器为标准进行定位</li>
<li>固定定位不会随着浏览器的滚动而滚动</li>
</ol>
<h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><p><code>position:static</code>清除定位，将元素之前的定位效果清除掉</p>
<hr>
<h3 id="脱流的影响"><a href="#脱流的影响" class="headerlink" title="脱流的影响"></a>脱流的影响</h3><p>目前在我们的学习过程当中，我们已经发现浮动，绝对定位，固定定位会脱流，那么，这些脱流以后的元素会有哪些影响呢？</p>
<ol>
<li>脱流以后的元素不占用原来的位置</li>
<li>脱流以后的元素宽度由内容撑开，不再是默认100%，但是还是可以通过width/height来设置的</li>
<li>脱流以后的元素不能使用<code>margin:auto</code>或<code>text-align:center</code> 来进行居中</li>
</ol>
<blockquote>
<p>浮动脱流和定位脱流都可以通过width与height来设置元素大小</p>
<p>定位脱流还可以通过left/right/top/bottom来设置大小</p>
</blockquote>
<h3 id="脱流以后的元素怎么居中"><a href="#脱流以后的元素怎么居中" class="headerlink" title="脱流以后的元素怎么居中"></a>脱流以后的元素怎么居中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动元素的脱流居中方式 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.outBox</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outBox&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>在浮动元素的外层元素上面将元素类型转换为<code>display:inline-block</code></p>
</li>
<li><p>最后在这个 inline-block的外边设置一个块级元素添加<code>text-align:center</code></p>
<h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2></li>
</ol>
<p>CSS在Web前端里面的几种特性如下</p>
<ol>
<li><p>统一性</p>
</li>
<li><p>便捷性</p>
</li>
<li><p>分离性</p>
<p>CSS分离性主要指两个方面，第一个方向是HTML里面style属性里面的代码，我们可以单独拿出来写在style标签里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;width:500px;&quot;</span>&gt;</span></span><br><span class="line">    这是一句代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过分离性，我们可以把样式的CSS代码直接在HTML的属性里面拿出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码只是最基本的分离性，因为在正常的开发过程当中，我们会发现HTML代码 与CSS代码都非常的多，这个时候，写在一个HTML里面非常不方便，所以，我们还要想着把它们进一步的分离</p>
<p>我们一般会新建一个CSS的文件如<code>index.css</code>然后再把html里面的样式直接写到这里来</p>
<p><strong>index.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;utf-8&quot;</span>; </span><br></pre></td></tr></table></figure>

<p>一般情况下，我们会在单独新建的CSS文件头部给一个如上所示的代码，这样会防止中文乱码</p>
<p>接下来，我们只需要在HTML文件里面，引入之前创建好的index.css就OK了</p>
<p><strong>注意事项：</strong></p>
<p>如果直接把之前写在HTML里面的代码放到了index.css里面去了以后，这个时候，要注意背景图片等相关文件的路径，下面的就教一下大家简单的文件路径地址</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#当前文件夹     ./</span></span><br><span class="line"><span class="meta">#跳出当前文件夹，返回上级文件夹   ../</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在一般情况下，我们会通过上面的方法去导入一个CSS文件，但是还有一种方式（这种试后期使用得多）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="keyword">@import</span> <span class="string">&quot;css/index.css&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*或*/</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(<span class="string">&quot;css/index.css&quot;</span>);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS还有三个高级的特性，这三个高级特性相较于基本特性来说，更重要一点</p>
</li>
</ol>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>CSS的继承性指的是子级元素可以继承一些父级元素所使用的CSS样式（当对父级元素设置一个CSS样式的时候，子级元素也有可能产生影响）</p>
<p><strong>注意</strong>：不是所有的样式都可以被继承</p>
<ol>
<li>display</li>
<li>width/height</li>
<li>float</li>
<li>margin/padding</li>
</ol>
<p>通常情部下，能够被继承的</p>
<ol>
<li>color</li>
<li>text-align</li>
<li>line-height</li>
<li>font-size/font-family</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>:<span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    我是父亲</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是儿子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img04.sogoucdn.com/app/a/100520146/de3ef01a3b5499ac39c17ccf83d643fb" alt="1563171688895.png"></p>
<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><blockquote>
<p>层叠性指的是每个元素的CSS样式像堆积木一样堆在一起，最终经过<strong>计算</strong>以后显示出一个CSS效果</p>
</blockquote>
<p>当我们把上面的代码在这里进行一个补充 ，向里面添加一个a标签的时候，这个时候，我们发现a标签继承了一些样式，但是唯独颜色值没有改变，这是因为每个元素可能都会有一些特殊的自已的样式 ，我们叫<code>user agent stylesheet</code></p>
<p>这个时候，我们就会发现，一个元素在页面上面所显示的效果，并不是一个CSS块（CSS代码区域）造成的，它可以是多个CSS块造成的</p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/63f47484947527fb76c231c5a5293748" alt="1563172064653.png"></p>
<p>通过上面的图，我们发现，页面上面的a标签的颜色是yellow这个颜色</p>
<p>第一步：它继承了.div1的颜色，为红色</p>
<p>第二步：自己默认又有一个颜色为蓝色（-webkit-link），第一步上面的红色就失效</p>
<p>第三步：我又单独去设置了一个a标签的颜色为yellow.第二步上在的(-webkit-link)就失效了</p>
<p>最终这个a标签就显示为设置的yellow这个颜色</p>
<p>当元素在层叠性上面使用样式的时候，这个时候，就是自定义&gt;自带默认样式&gt;继承</p>
<p><code>自定义</code>&gt;<code>user agent stylesheet</code>&gt;<code>Inherited</code></p>
<hr>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>在刚刚的层叠性里面，我们发现CSS的样式是要经过计算的，既然是计算肯定会有先有后，我们可以得知上面的公式<code>自定义</code>&gt;<code>user agent stylesheet</code>&gt;<code>Inherited</code></p>
<p><strong>问题</strong>：如果用户自己写样式的时候，发生了冲突，怎么办</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权重值</th>
</tr>
</thead>
<tbody><tr>
<td>*与伪类</td>
<td>0</td>
</tr>
<tr>
<td>标签选择器</td>
<td>1</td>
</tr>
<tr>
<td>class选择器</td>
<td>10</td>
</tr>
<tr>
<td>id选择器</td>
<td>100</td>
</tr>
<tr>
<td>style样式</td>
<td>1000</td>
</tr>
<tr>
<td>!important</td>
<td>10000</td>
</tr>
</tbody></table>
<p>如果某一个CSS样式出现冲突就看它的选择器，按上面的方法进行计算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">		&lt;title&gt;&lt;/title&gt;</span><br><span class="line">		&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 !important&gt;style&gt;id&gt;class&gt;标签</span></span><br><span class="line"><span class="comment">			 * */</span>	</span><br><span class="line">			<span class="comment">/*1+1+10=12*/</span></span><br><span class="line">			<span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-class">.p1</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: deeppink;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*1+1=2*/</span></span><br><span class="line">			<span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: blue <span class="meta">!important</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*1*/</span></span><br><span class="line">			<span class="selector-tag">p</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: red;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*10*/</span></span><br><span class="line">			<span class="selector-class">.p1</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: green;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*1+10=11*/</span></span><br><span class="line">			<span class="selector-tag">p</span><span class="selector-class">.p1</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: gray;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*100*/</span></span><br><span class="line">			<span class="selector-id">#p2</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: yellow;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*1+100=101*/</span></span><br><span class="line">			<span class="selector-tag">p</span><span class="selector-id">#p2</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: lightseagreen;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*10+100=110*/</span></span><br><span class="line">			<span class="selector-class">.p1</span><span class="selector-id">#p2</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>:blue;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*1+100+10=111*/</span></span><br><span class="line">			<span class="selector-tag">div</span>&gt;<span class="selector-id">#p2</span><span class="selector-class">.p1</span>&#123;</span><br><span class="line">				<span class="attribute">color</span>: red;</span><br><span class="line">			&#125;</span><br><span class="line">		&lt;/style&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">		&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">			&lt;<span class="selector-tag">p</span> class=&quot;p1&quot; id=&quot;p2&quot; style=&quot;<span class="attribute">color</span>: pink;&quot;&gt;我要测试优先级&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">		&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">	&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>

<p> 在使用选择器的过程当中，我们还是优先的使用class作为选择器，因为向上可以升，向下可以降（渐近增强与优雅降级）</p>
<hr>
<p>如果在<strong>一个选择器里面</strong>发现了样式冲突，以最后一次出现的为主</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*10*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*在同一个选择器里，color出现了两次，以后一次出现为主*/</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*1+10=11*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">div</span><span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: pink;   <span class="comment">/*经过计算，这是最终的显示结果*/</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			晓看天色暮看云，行也思君，坐也思君</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS样式补充"><a href="#CSS样式补充" class="headerlink" title="CSS样式补充"></a>CSS样式补充</h2><ol>
<li><p>元素的隐藏与显示</p>
<ul>
<li>display:none这一种方式，它隐藏元素，不占用位置，如果要显示display:元素类型</li>
<li>visibility:hidden 这一种方式 ，它也隐藏元素，但是仍然占用位置，如果要显示则是visibility:visible</li>
</ul>
</li>
<li><p>元素透明度</p>
<p>元素的透明度分为两个部分，</p>
<p>第一个是设置全部的透明度opacity:0（不显示，全透明） 到opacity:1（全显示）</p>
<p>第二个是设置背景的透明度background-color: rgba(255,0,0,0.5);</p>
<p>rgba前三个还是指三元色，最后一个值代表透明度，1代表全显示,0代表全透明</p>
</li>
<li><p>元素尺寸问题</p>
<ul>
<li>min-height/min-width:指元素的最小宽度与高度，可以由里面内容再次去撑开</li>
<li>max-width/max-height:指元素的最大宽度与最大高度</li>
<li>width/height则是指元素的固定宽度与固定高度</li>
<li>resize:vertical/horizontal/both  鼠标可以改变盒子的大小,结合overflow:auto一起使用</li>
</ul>
</li>
<li><p>多背景图片</p>
<p>指的是一个元素可以使用多个背景图片</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">990px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">475px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img/show.png</span>),<span class="built_in">url</span>(<span class="string">img/center_bgimg.png</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat,repeat;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">100px</span> <span class="number">100px</span>,<span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-position</span>: right center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在使用多背景图片的时候，我们一般在background-image里面，是从右向左看</p>
<blockquote>
<blockquote>
<p>后期在CSS的渐变里面，我们还会使用到它</p>
</blockquote>
</blockquote>
</blockquote>
<ol>
<li>CSS多列处理<ul>
<li>column-count: 3;将内容分成3列</li>
<li>column-gap: 30px;列与列之间的间距是30px</li>
<li>column-rule:1px solid red;列与列之间的分隔规范，可以像设置border一样去设置</li>
<li>column-span:1或all，1代表默认的跨一列，all则代表可以跨所有列</li>
</ul>
</li>
</ol>
<p>​    </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/CSS%E8%BF%87%E6%B8%A1/</url>
    <content><![CDATA[<h2 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h2><p>过渡指一个元素由一个状态转变一另一个状态过程，主要指的是CSS里面的一个属性<code>transition</code></p>
<p>过渡由以下几个属性来构成</p>
<h3 id="过渡的基本属性"><a href="#过渡的基本属性" class="headerlink" title="过渡的基本属性"></a>过渡的基本属性</h3><ol>
<li><p>transition-property指的是过渡的属性，它面如果接了多个属性可以用空格来隔开</p>
</li>
<li><p>transition-duration指的是过渡持续的时间</p>
</li>
<li><p>transition-timing-function指属性在变化的时候的过程，它常用属性如下</p>
<ul>
<li><p>linear这个代表匀速直线</p>
<p><img src="https://img04.sogoucdn.com/app/a/100520146/2d1ed502301ee4075b1062b1f7a50850" alt="1563244750196.png"></p>
</li>
<li><p>ease属性值</p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/e33d1d98ba2a6ec20e47e4b784f68dcb" alt="1563244775277.png"></p>
</li>
<li><p>ease-in属性值</p>
<p><img src="https://img04.sogoucdn.com/app/a/100520146/5b0ccde3995f21e072959f6865cda906" alt="1563244841399.png"></p>
</li>
<li><p>ease-out属性值</p>
<p><img src="https://img03.sogoucdn.com/app/a/100520146/960a99bbc6e837721e44dc51b7cbb71e" alt="1563244872226.png"></p>
</li>
<li><p>ease-in-out属性值</p>
<p><img src="https://img03.sogoucdn.com/app/a/100520146/e9accfe4da512f88c95d9a57ae6bbee1" alt="1563244914478.png"></p>
</li>
</ul>
<p>除了通过刚刚几种方式设置它的属性值以外，我们还可以直接在页面上面拖出它的效果，得到属性值</p>
</li>
<li><p>transition-delay:5s指的是过渡延时，它可以在这里让过渡的变化等待多长时间</p>
</li>
</ol>
<p>上面的四个属性是过渡的基本属性，我们在使用的过程当中，我们可以把它连起来一起写，这样方便快捷一些</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">0.5s</span> linear <span class="number">5s</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*需要过渡的属性*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*linear匀速直线*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    当我们把鼠标放到 div1上面的时候，元素由一个状态变成了另一个状态</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    但是这个状态 的切换是一瞬间就完成的，我们希望有一个变化的过程</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    * */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        先出现的时间是过渡时间，后出现的时间是延时等待时间</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        * */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: width <span class="number">0.5s</span> linear <span class="number">5s</span>; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多个属性的过渡"><a href="#多个属性的过渡" class="headerlink" title="多个属性的过渡"></a>多个属性的过渡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*我现在希望宽度与高度都实现过渡 怎么办*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width height;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*我们可以在在这个属性后面接多个属性*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">1s</span> ;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果要执行多属性的过渡，我们可以使用transition-propery:属性1 属性2</p>
<p>如果所有的属性都要执行过渡，则使用all这个属性值  <code>transition-propery:all</code></p>
<h3 id="过渡的兼容性处理"><a href="#过渡的兼容性处理" class="headerlink" title="过渡的兼容性处理"></a>过渡的兼容性处理</h3><p>transition这个属性它是一个CSS3的属性，它在不同的浏览器下面都有不同的兼容性，怎么处理这个兼容性呢</p>
<p>W3C为了保证各个浏览器的兼容性，在使用CSS3的时候，需要加上一个特殊的前缀</p>
<ol>
<li><p>以谷歌为<strong>核心</strong>的浏览器      -webkit-       例-webkit-transition</p>
<p>还包含国内360，qq，搜狗,世界之窗</p>
<p>更包含android平台内置的浏览器</p>
</li>
<li><p>以IE为标准的浏览器          -ms-              例-ms-transition</p>
</li>
<li><p>以火狐为标准的浏览器     -moz-             例-moz-transition</p>
</li>
<li><p>以苹果公司<strong>平台</strong>的safari为核心的浏览器   -webkit-   例-webkit-transition</p>
<p>它指苹果的PC端浏览器，也指IOS的手机浏览器</p>
</li>
<li><p>以欧鹏为核心的浏览器     -o-                  例-o-transition</p>
</li>
</ol>
<p>我们在开发的时候，一般情况下，是不加前缀的，因为我们开发的时候是以谷歌浏览器在测试，而谷歌浏览器是完全遵守W3C的标准的</p>
<h3 id="不能执行过渡的属性"><a href="#不能执行过渡的属性" class="headerlink" title="不能执行过渡的属性"></a>不能执行过渡的属性</h3><p>transition可以执行80%以上的属性过渡，但是仍然会有一些属性无法执行过渡，现在列举一些</p>
<ol>
<li>display:block/none的过渡</li>
<li>z-index不能执行过渡</li>
<li>float不能执行过渡</li>
<li>visibility 不能执行过渡</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/CSS%E6%B8%90%E5%8F%98/</url>
    <content><![CDATA[<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>CSS里面的渐变指的是背景的渐变，它主要存在两种形式，一种是线性渐变，一种是径向渐变</p>
<h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><h4 id="基本线性渐变"><a href="#基本线性渐变" class="headerlink" title="基本线性渐变"></a>基本线性渐变</h4><hr>
<blockquote>
<p>沿着某一条直线进行颜色的改变，使用的CSS属性为<code>linear-gradient</code></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="comment">/*标准定法*/</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to 方向,颜色一,颜色二.......);</span><br><span class="line">    <span class="comment">/*兼容写法*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(right,颜色二,颜色一);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在兼容语法里面，有两点需要注意</p>
<ol>
<li>添加各种浏览器特定的前缀-webkit-,-moz-等</li>
<li>在方向前面去掉<code>to</code>关键字，颜色反着来</li>
</ol>
</blockquote>
<p>在线性渐变里面，它的第一个参数代表的是方向，这个方向可以指一个方向，也可以指两个关键的组合</p>
<p>如左上角to left top,右上角 to right top,左下角 to left bottom,右下角  to right bottom</p>
<p>后面接的是颜色值</p>
<h4 id="设置渐变色的尺寸"><a href="#设置渐变色的尺寸" class="headerlink" title="设置渐变色的尺寸"></a>设置渐变色的尺寸</h4><p>当我们在设置渐变的时候，可以在某一个特殊颜色上面设置它的间距，这个间距叫渐变色的颜色尺寸</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div5</span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    在下面的代码里面，我们可以看到蓝色会呈现50%的效果</span></span><br><span class="line"><span class="comment">    50%到70%为黄色</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,blue <span class="number">50%</span>,yellow <span class="number">70%</span>,red,orange <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img04.sogoucdn.com/app/a/100520146/ff6b6315c0a5c0e28147298a5548c438" alt="1563343435308.png"></p>
<blockquote>
<p><strong>注意事项：</strong> </p>
<p>在这里，它的尺寸最终不能大于100%，每个颜色使用逗号来进行隔开，然后颜色的后面可以跟百分比的值</p>
</blockquote>
<p>我们的线性渐变除了使用某一个方向做为颜色的改变方向，还可以使用角度来进行</p>
<h3 id="角度线性线变"><a href="#角度线性线变" class="headerlink" title="角度线性线变"></a>角度线性线变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div6</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在第一个参数上面，我们已经不再写具体的方法了，转而可以使用一个角度来替代</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>,red,blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0deg代表上面</p>
<p>90deg代表右边 </p>
<p>180deg代表下边 </p>
<p>270deg代表左边  </p>
<p>角度线性渐变就弥补我们之前在基本的线性渐变方向单一的问题，它可以通过角度直接指定某一个方向</p>
<h3 id="渐变与图片结合使用"><a href="#渐变与图片结合使用" class="headerlink" title="渐变与图片结合使用"></a>渐变与图片结合使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/*background-image: url(img/1.jpg);*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right bottom,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>),<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.1</span>)), <span class="built_in">url</span>(<span class="string">img/1.jpg</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的效果的<strong>核心思路</strong>其实就是把之前的多个背景图片设置，它产先从右向左加载，先加载了背景图片，再加载了渐变色，效果图如下</p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/61bce9382fd3edf254c7526c78eb41c4" alt="1563344605888.png"></p>
<h3 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h3><p>当设置某一个区域渐变颜色的时候，我们可以重复的这些渐变色填充</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(to right,blue <span class="number">10%</span>,red <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img03.sogoucdn.com/app/a/100520146/6d183663bbfd8e20dfff3590a64bffa0" alt="1563344926021.png"></p>
<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变指提的是由内向外的一种扩散渐变方式，使用的属性名是<code>radial-gradient</code></p>
<p>径向渐变的语法格式是</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*径向渐变第一个参数是存在的，但是一般可以省略</span></span><br><span class="line"><span class="comment">      它的第一个参数是ellipse椭圆或circle圆</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">radial-gradient</span>(可选参数,颜色一,颜色二.....);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们在设置径向渐变的时候，如果这个元素它不是正方形，那么径向渐变默认会成为一个椭圆，如果这个时候还想设置成圆，那么，我们就添加第一个参数为<code>circle</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle,red,blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red,blue);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img04.sogoucdn.com/app/a/100520146/b1277ffa421133960c6596b1835949fa" alt="1563345223395.png"></p>
<p>径向渐变与线性渐变很相似，它也可以设置百分比的值，也可以设置多个颜色值</p>
<h3 id="重复的径向渐变"><a href="#重复的径向渐变" class="headerlink" title="重复的径向渐变"></a>重复的径向渐变</h3><p>与之前讲过的重复的线性渐变相似</p>
<p><code>repeating-radial-gradient</code>是重复径向渐变的属性名，设置方式与重复线性渐变一样</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(red <span class="number">10%</span>,blue <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>题外话</strong></p>
<p>虽然渐变是一个颜色，但是我们不能通过<code>background-color</code>来设置，背景色的渐变其关把它当成了一个图片，所以，我们要使用background-image这个属性或background属性</p>
<p>在之前的时候，我们讲过背景background-image可以设置多个图片，所以下面的代码它是成立的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*下面是两个渐变叠加在了一起*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.5</span>),<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>)),<span class="built_in">radial-gradient</span>(deeppink,white);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>之前，我们讲过背景颜色<code>background-color</code>,背景图片<code>background-image</code>等与背景相关的属性，现在，我们可以统一简写成<code>background</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="comment">/*background:red;*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">imgb/logo.png</span>) no-repeat right bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>url代表设置backround-image属性,no-repeat代表设置background-repeat,right bottom代表设置background-position属性</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/Flutter%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Flutter学习"><a href="#Flutter学习" class="headerlink" title="Flutter学习"></a>Flutter学习</h2><h3 id="一、Flutter开发环境的搭建（Windows版）"><a href="#一、Flutter开发环境的搭建（Windows版）" class="headerlink" title="一、Flutter开发环境的搭建（Windows版）"></a>一、Flutter开发环境的搭建（Windows版）</h3><h4 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1.系统要求"></a>1.系统要求</h4><ul>
<li>操作系统必须在windows7以上的64位操作系统</li>
<li>磁盘空间最好在3G以上</li>
<li>需要装Git环境和Java环境</li>
</ul>
<h4 id="2-下载FlutterSDK"><a href="#2-下载FlutterSDK" class="headerlink" title="2.下载FlutterSDK"></a>2.下载FlutterSDK</h4><ul>
<li>github下载命令：<code>git clone https://github.com/flutter/flutter.git</code></li>
<li>官网地址：<code>https://flutter.io/sdk-archive/#windows</code>(有时候打不开）；</li>
</ul>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><ul>
<li><p>转到 “控制面板&gt;用户帐户&gt;用户帐户&gt;更改我的环境变量”</p>
</li>
<li><p>在“用户变量”下检查是否有名为“Path”的条目:</p>
<ul>
<li>如果该条目存在, 追加 <code>flutter\bin</code>的全路径，使用 <code>;</code> 作为分隔符.</li>
<li>如果条目不存在, 创建一个新用户变量 <code>Path</code> ，然后将 <code>flutter\bin</code>的全路径作为它的值.</li>
</ul>
</li>
<li><p>在“用户变量”下新建PUB_HOSTED_URL”和”FLUTTER_STORAGE_BASE_URL”的条目，并赋值，值如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="attr">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-终端输入-flutter-doctor测试"><a href="#4-终端输入-flutter-doctor测试" class="headerlink" title="4.终端输入 flutter doctor测试"></a>4.终端输入 <code>flutter doctor</code>测试</h4><ul>
<li><p>会得到类似的如下结果：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">[-] Android toolchain - develop <span class="keyword">for</span> Android devices</span><br><span class="line">    • Android SDK at D:<span class="string">\Android\sdk</span></span><br><span class="line">    ✗ Android SDK <span class="keyword">is</span> missing command line tools; download <span class="keyword">from</span> https:<span class="regexp">//goo.gl/XxQghQ</span></span><br><span class="line"><span class="regexp">    • Try re-installing or updating your Android SDK,</span></span><br><span class="line"><span class="regexp">      visit https://</span>flutter.io<span class="regexp">/setup/</span><span class="comment">#android-setup for detailed instructions.</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-Android-Studio-的安装"><a href="#5-Android-Studio-的安装" class="headerlink" title="5. Android Studio 的安装"></a>5. Android Studio 的安装</h4><ul>
<li>Android Studio 的下载地址： <code>https://developer.android.google.cn/studio/</code></li>
<li>Android Studio 的安装教程： <code>https://www.cnblogs.com/xiadewang/p/7820377.html</code></li>
</ul>
<h4 id="6-安装Android证书"><a href="#6-安装Android证书" class="headerlink" title="6.安装Android证书"></a>6.安装Android证书</h4><ul>
<li>安装好Android Studio后，打开终端，输入<code>flutter doctor</code>，其中有一个 x 就是提示没有安装证书。安装证书只要在终端里执行下面的命令<code>flutter doctor --android-licenses</code>,然后一直选Y就安装好了。</li>
</ul>
<h3 id="二、Flutter常用-组件"><a href="#二、Flutter常用-组件" class="headerlink" title="二、Flutter常用 组件"></a>二、Flutter常用 组件</h3><h4 id="1-基础组件"><a href="#1-基础组件" class="headerlink" title="1.基础组件"></a>1.基础组件</h4><p>​       文本组件Text()、图片组件Image()、按钮组件xxButton()、输入框组件 <strong>TextField</strong> ()、表单组件From()、单选框组件Switch()、复选框组件CheckBox()等等。</p>
<ul>
<li><p>例如：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//文本组件</span></span><br><span class="line">Text(<span class="string">&quot;hello world!&quot;</span>*<span class="number">10</span>,</span><br><span class="line">     maxLines: <span class="number">2</span>,</span><br><span class="line">     overflow: TextOverflow.ellipsis,</span><br><span class="line">);</span><br><span class="line"><span class="comment">//按钮组件（有很多种）</span></span><br><span class="line">RaisedButton(</span><br><span class="line">  child: Text(<span class="string">&quot;normal&quot;</span>),</span><br><span class="line">  onPressed: () =&gt; &#123;&#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-布局类组件"><a href="#2-布局类组件" class="headerlink" title="2.布局类组件"></a>2.布局类组件</h4><pre><code>水平线布局 Row()、垂直布局 Column()、弹性布局Flex()、流式布局Wrap()和Flow()、层叠布局Stack()和Positioned()。</code></pre><h5 id="1）线性布局"><a href="#1）线性布局" class="headerlink" title="(1）线性布局"></a>(1）线性布局</h5><ul>
<li>基本格式：</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">    crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">    mainAxisSize: MainAxisSize.max, <span class="comment">//有效，外层Colum高度为整个屏幕</span></span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            child: Column(</span><br><span class="line">                mainAxisSize: MainAxisSize.max,<span class="comment">//无效，内层Colum高度为实际高度  </span></span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                    Text(<span class="string">&quot;hello world &quot;</span>),</span><br><span class="line">                    Text(<span class="string">&quot;I am Tom &quot;</span>),</span><br><span class="line">                ],</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>MainAxisAlignment是一个枚举类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> MainAxisAlignment &#123;</span><br><span class="line">  start,   <span class="comment">//将子控件放在主轴的开始位置</span></span><br><span class="line">  end, <span class="comment">//将子控件放在主轴的结束位置</span></span><br><span class="line">  center,<span class="comment">//将子控件放在主轴的中间位置</span></span><br><span class="line">  spaceBetween,<span class="comment">//将主轴空白位置进行均分，排列子元素，手尾没有空隙</span></span><br><span class="line">  spaceAround,<span class="comment">//将主轴空白区域均分，使中间各个子控件间距相等，首尾子控件间距为中间子控件间距的一半</span></span><br><span class="line">  spaceEvenly,<span class="comment">//将主轴空白区域均分，使各个子控件间距相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2）弹性布局"><a href="#2）弹性布局" class="headerlink" title="(2）弹性布局"></a>(2）弹性布局</h5><ul>
<li><p>Expanded在Flex容器中可设置比例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Flex(</span><br><span class="line">    direction: Axis.horizontal,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        Expanded(</span><br><span class="line">            flex: <span class="number">1</span>,</span><br><span class="line">            child: Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">            ),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">            flex: <span class="number">2</span>,</span><br><span class="line">            child: Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">            ),</span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="3-流式布局"><a href="#3-流式布局" class="headerlink" title="(3)流式布局"></a>(3)流式布局</h5><ul>
<li>Wrap直接使用，超过屏幕自动换行</li>
<li>Flow需要计算，但性能好</li>
</ul>
<h5 id="4-层叠布局"><a href="#4-层叠布局" class="headerlink" title="(4)层叠布局"></a>(4)层叠布局</h5>  <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">    alignment: <span class="keyword">const</span> FractionalOffset(<span class="number">0.5</span>,<span class="number">0.8</span>),</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> CircleAvatar(</span><br><span class="line">        	backgroundImage: <span class="keyword">new</span> NetworkImage(<span class="string">&#x27;图片地址&#x27;</span>)，</span><br><span class="line">            radius:<span class="number">100.0</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Container(</span><br><span class="line">        	decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">            	color: Colors.lightBlue,</span><br><span class="line">            ),</span><br><span class="line">            padding: EdgeInsets.all(<span class="number">5.0</span>),</span><br><span class="line">            child: Text(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> CircleAvatar(</span><br><span class="line">        	backgroundImage: <span class="keyword">new</span> NetworkImage(<span class="string">&#x27;图片地址&#x27;</span>)，</span><br><span class="line">            radius:<span class="number">100.0</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Postioned(</span><br><span class="line">        	bottom: <span class="number">10.0</span>,</span><br><span class="line">            left: <span class="number">10.0</span>,</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Postioned(</span><br><span class="line">        	top: <span class="number">10.0</span>,</span><br><span class="line">            right: <span class="number">10.0</span>,</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">&#x27;345&#x27;</span>)</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="3-容器类组件"><a href="#3-容器类组件" class="headerlink" title="3.容器类组件"></a>3.容器类组件</h4><h5 id="1-Padding"><a href="#1-Padding" class="headerlink" title="(1)Padding"></a>(1)Padding</h5><ul>
<li><p>flutter的Padding也是单独抽出来的组件 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Padding(</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16.0</span>),<span class="comment">//上下左右各添加16像素</span></span><br><span class="line">      child: Column()</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-限制类容器"><a href="#2-限制类容器" class="headerlink" title="(2)限制类容器"></a>(2)限制类容器</h5><ul>
<li><p>ConstrainedBox、SizedBox等。 用于限制组件的最大最小值，格式如下，一个是限制条件的属性、一个是child放的内容 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">100.0</span>),  <span class="comment">//父</span></span><br><span class="line">    child: UnconstrainedBox( <span class="comment">//“去除”父级限制</span></span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),<span class="comment">//子</span></span><br><span class="line">        child: redBox,</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="3-装饰器DecoratedBox"><a href="#3-装饰器DecoratedBox" class="headerlink" title="(3)装饰器DecoratedBox"></a>(3)装饰器DecoratedBox</h5><ul>
<li><p>可以设置圆角、渐变、阴影等等。格式如下 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> DecoratedBox(</span><br><span class="line">    decoration: BoxDecoration(</span><br><span class="line">      gradient: LinearGradient(colors:[Colors.red,Colors.orange[<span class="number">700</span>]]), <span class="comment">//背景渐变</span></span><br><span class="line">      borderRadius: BorderRadius.circular(<span class="number">3.0</span>), <span class="comment">//3像素圆角</span></span><br><span class="line">      boxShadow: [ <span class="comment">//阴影</span></span><br><span class="line">        BoxShadow(</span><br><span class="line">            color:Colors.black54,</span><br><span class="line">            offset: Offset(<span class="number">2.0</span>,<span class="number">2.0</span>),</span><br><span class="line">            blurRadius: <span class="number">4.0</span></span><br><span class="line">        )</span><br><span class="line">      ]</span><br><span class="line">    ),</span><br><span class="line">  child: Padding(padding: EdgeInsets.symmetric(horizontal: <span class="number">80.0</span>, vertical: <span class="number">18.0</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;Login&quot;</span>, style: TextStyle(color: Colors.white),),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4-变换Transform"><a href="#4-变换Transform" class="headerlink" title="(4)变换Transform"></a>(4)变换Transform</h5><ul>
<li><p>旋转(rotate)、平移(translate)、缩(scale) </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Transform.rotate(</span><br><span class="line">    angle:<span class="number">90</span> ,</span><br><span class="line">    child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)；</span><br></pre></td></tr></table></figure>
</li>
<li><p>这种方式的旋转不会执行build方法，所以背景不会改变性能也较好一些，我的理解是它仅仅改变了child的值，而如果要改变全部则使用RotatedBox </p>
</li>
<li><p>RotatedBox</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">     decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">     <span class="comment">//将Transform.rotate换成RotatedBox  </span></span><br><span class="line">     child: RotatedBox(</span><br><span class="line">       quarterTurns: <span class="number">1</span>, <span class="comment">//旋转90度(1/4圈)</span></span><br><span class="line">       child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">     ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>透明度的变换</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Opacity(</span><br><span class="line">        opacity: <span class="number">0.1</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Container(</span><br><span class="line">        width: <span class="number">250.0</span>,</span><br><span class="line">        height: <span class="number">100.0</span>,</span><br><span class="line">        decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        backgroundColor: <span class="keyword">const</span> Color(<span class="number">0xff000000</span>),</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="5-Container容器"><a href="#5-Container容器" class="headerlink" title="(5)Container容器"></a>(5)Container容器</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment,</span><br><span class="line">  <span class="keyword">this</span>.padding, <span class="comment">//容器内补白，属于decoration的装饰范围</span></span><br><span class="line">  Color color, <span class="comment">// 背景色</span></span><br><span class="line">  Decoration decoration, <span class="comment">// 背景装饰</span></span><br><span class="line">  Decoration foregroundDecoration, <span class="comment">//前景装饰</span></span><br><span class="line">  <span class="built_in">double</span> width,<span class="comment">//容器的宽度</span></span><br><span class="line">  <span class="built_in">double</span> height, <span class="comment">//容器的高度</span></span><br><span class="line">  BoxConstraints constraints, <span class="comment">//容器大小的限制条件</span></span><br><span class="line">  <span class="keyword">this</span>.margin,<span class="comment">//容器外补白，不属于decoration的装饰范围</span></span><br><span class="line">  <span class="keyword">this</span>.transform, <span class="comment">//变换</span></span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  padding,</span><br><span class="line">  margin,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="6-Scaffold"><a href="#6-Scaffold" class="headerlink" title="(6)Scaffold"></a>(6)Scaffold</h5><ul>
<li><p>项目一创建是就有。它是一个脚手架容器，就是很多容器都定义好了，只要跟着写就有相应的效果。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">      appBar: AppBar( <span class="comment">//导航栏</span></span><br><span class="line">        title: Text(<span class="string">&quot;App Name&quot;</span>), </span><br><span class="line">        actions: &lt;Widget&gt;[ <span class="comment">//导航栏右侧菜单</span></span><br><span class="line">          IconButton(icon: Icon(Icons.share), onPressed: () &#123;&#125;),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      drawer: <span class="keyword">new</span> MyDrawer(), <span class="comment">//抽屉</span></span><br><span class="line">      bottomNavigationBar: BottomNavigationBar( <span class="comment">// 底部导航</span></span><br><span class="line">        items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">&#x27;Home&#x27;</span>)),</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.business), title: Text(<span class="string">&#x27;Business&#x27;</span>)),</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.school), title: Text(<span class="string">&#x27;School&#x27;</span>)),</span><br><span class="line">        ],</span><br><span class="line">        currentIndex: _selectedIndex,</span><br><span class="line">        fixedColor: Colors.blue,</span><br><span class="line">        onTap: _onItemTapped,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton( <span class="comment">//悬浮按钮</span></span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed:_onAdd</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="7-Appbar"><a href="#7-Appbar" class="headerlink" title="(7)Appbar"></a>(7)Appbar</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.leading, <span class="comment">//导航栏最左侧Widget，常见为抽屉菜单按钮或返回按钮。</span></span><br><span class="line">  <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>, <span class="comment">//如果leading为null，是否自动实现默认的leading按钮</span></span><br><span class="line">  <span class="keyword">this</span>.title,<span class="comment">// 页面标题</span></span><br><span class="line">  <span class="keyword">this</span>.actions, <span class="comment">// 导航栏右侧菜单</span></span><br><span class="line">  <span class="keyword">this</span>.bottom, <span class="comment">// 导航栏底部菜单，通常为Tab按钮组</span></span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">4.0</span>, <span class="comment">// 导航栏阴影</span></span><br><span class="line">  <span class="keyword">this</span>.centerTitle, <span class="comment">//标题是否居中 </span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">  ...   <span class="comment">//其它属性见源码注释</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Appbar下的TabBar </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">bottom: TabBar(</span><br><span class="line">    controller: _tabController,</span><br><span class="line">    tabs: tabs.map((e) =&gt; Tab(text: e)).toList())</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-滚动类组件"><a href="#4-滚动类组件" class="headerlink" title="4.滚动类组件"></a>4.滚动类组件</h4><ul>
<li>SingleChildScrollView、ListView、GridView、ConstomScrollView以及滚动监听ScrollController </li>
</ul>
<h5 id="1-SingleChildScrollView"><a href="#1-SingleChildScrollView" class="headerlink" title="(1)SingleChildScrollView"></a>(1)SingleChildScrollView</h5><ul>
<li><p>SingleChildScrollView只能接收一个组件，如果在外面添加Scrollbar的话会有滚动条，不加则没有。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SingleChildScrollView(&#123;</span><br><span class="line"> <span class="keyword">this</span>.scrollDirection = Axis.vertical, <span class="comment">//滚动方向，默认是垂直方向</span></span><br><span class="line"> <span class="keyword">this</span>.reverse=<span class="keyword">false</span>,<span class="comment">//滚动方向是否反向</span></span><br><span class="line"> <span class="keyword">this</span>.padding,<span class="comment">//边距bool primary,//这是否是与父控件关联的主滚动视图 应该是是否与父控件一起滑动 用来解决滑动冲突</span></span><br><span class="line"> <span class="keyword">this</span>.physics,<span class="comment">//滑动松手后的滑动方式</span></span><br><span class="line"> <span class="keyword">this</span>.controller,</span><br><span class="line"> <span class="keyword">this</span>.child,<span class="comment">//子view</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">      child: SingleChildScrollView(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column( </span><br><span class="line">            <span class="comment">//动态创建一个List&lt;Widget&gt;  </span></span><br><span class="line">            children: str.split(<span class="string">&quot;&quot;</span>) </span><br><span class="line">                <span class="comment">//每一个字母都用一个Text显示,字体为原来的两倍</span></span><br><span class="line">                .map((c) =&gt; Text(c, textScaleFactor: <span class="number">2.0</span>,)) </span><br><span class="line">                .toList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="physics"><a href="#physics" class="headerlink" title="physics"></a>physics</h5><ul>
<li>const ClampingScrollPhysics()：Android下微光效果 。</li>
<li>const BouncingScrollPhysics()：iOS下弹性效果。 </li>
</ul>
</li>
</ul>
<h5 id="2-ListView"><a href="#2-ListView" class="headerlink" title="(2)ListView"></a>(2)ListView</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="comment">//可滚动widget公共参数</span></span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  <span class="built_in">bool</span> primary,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//ListView各个构造函数的共同参数  </span></span><br><span class="line">  <span class="built_in">double</span> itemExtent,</span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double</span> cacheExtent,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//子widget列表</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数据不多的情况</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  shrinkWrap: <span class="keyword">true</span>, </span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;列表数据&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据多的情况下，为了方便使用builder或者separated</p>
<ul>
<li><p>separated跟builder类似只是可以方便定义分割线</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//下划线widget预定义以供复用。  </span></span><br><span class="line">    Widget divider1=Divider(color: Colors.blue,);</span><br><span class="line">    Widget divider2=Divider(color: Colors.green);</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">        itemCount: <span class="number">100</span>,</span><br><span class="line">        <span class="comment">//列表项构造器</span></span><br><span class="line">        itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">          <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//分割器构造器</span></span><br><span class="line">        separatorBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">          <span class="keyword">return</span> index%<span class="number">2</span>==<span class="number">0</span>?divider1:divider2;</span><br><span class="line">        &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h5 id="3-GridView"><a href="#3-GridView" class="headerlink" title="(3)GridView"></a>(3)GridView</h5><ul>
<li><p>网格布局 ,与ListView大致相同</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_GridViewLayoutState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">GridViewLayout</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView(</span><br><span class="line">        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">            crossAxisCount: <span class="number">3</span>, <span class="comment">//横轴三个子widget</span></span><br><span class="line">            childAspectRatio: <span class="number">1.0</span> <span class="comment">//宽高比为1</span></span><br><span class="line">        ),</span><br><span class="line">        children:&lt;Widget&gt;[</span><br><span class="line">          Icon(Icons.ac_unit),</span><br><span class="line">          Icon(Icons.airport_shuttle),</span><br><span class="line">          Icon(Icons.all_inclusive),</span><br><span class="line">          Icon(Icons.beach_access),</span><br><span class="line">          Icon(Icons.cake),</span><br><span class="line">          Icon(Icons.free_breakfast)</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4-CustomScrollView"><a href="#4-CustomScrollView" class="headerlink" title="(4)CustomScrollView"></a>(4)CustomScrollView</h5><ul>
<li>用于把滚动控件放在同一个容器上做到滚动效果一致的胶水控件。它的子控件有对应的滚动控件实现Sliver </li>
</ul>
<h5 id="5-Sliver"><a href="#5-Sliver" class="headerlink" title="(5)Sliver"></a>(5)Sliver</h5><ul>
<li><p>在Flutter中，Sliver通常指具有特定滚动效果的可滚动块。 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomScrollViewTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//因为本路由没有使用Scaffold，为了让子级Widget(如Text)使用</span></span><br><span class="line">    <span class="comment">//Material Design 默认的样式风格,我们使用Material作为本路由的根。</span></span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      child: CustomScrollView(</span><br><span class="line">        slivers: &lt;Widget&gt;[</span><br><span class="line">          <span class="comment">//AppBar，包含一个导航栏</span></span><br><span class="line">          SliverAppBar(</span><br><span class="line">            pinned: <span class="keyword">true</span>,</span><br><span class="line">            expandedHeight: <span class="number">250.0</span>,</span><br><span class="line">            flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">              title: <span class="keyword">const</span> Text(<span class="string">&#x27;Demo&#x27;</span>),</span><br><span class="line">              background: Image.asset(</span><br><span class="line">                <span class="string">&quot;./images/avatar.png&quot;</span>, fit: BoxFit.cover,),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line"></span><br><span class="line">          SliverPadding(</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">            sliver: <span class="keyword">new</span> SliverGrid( <span class="comment">//Grid</span></span><br><span class="line">              gridDelegate: <span class="keyword">new</span> SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">                crossAxisCount: <span class="number">2</span>, <span class="comment">//Grid按两列显示</span></span><br><span class="line">                mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">                crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">                childAspectRatio: <span class="number">4.0</span>,</span><br><span class="line">              ),</span><br><span class="line">              delegate: <span class="keyword">new</span> SliverChildBuilderDelegate(</span><br><span class="line">                    (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">                  <span class="comment">//创建子widget      </span></span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Container(</span><br><span class="line">                    alignment: Alignment.center,</span><br><span class="line">                    color: Colors.cyan[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">                    child: <span class="keyword">new</span> Text(<span class="string">&#x27;grid item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,</span><br><span class="line">                childCount: <span class="number">20</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">//List</span></span><br><span class="line">          <span class="keyword">new</span> SliverFixedExtentList(</span><br><span class="line">            itemExtent: <span class="number">50.0</span>,</span><br><span class="line">            delegate: <span class="keyword">new</span> SliverChildBuilderDelegate(</span><br><span class="line">                    (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">                  <span class="comment">//创建列表项      </span></span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Container(</span><br><span class="line">                    alignment: Alignment.center,</span><br><span class="line">                    color: Colors.lightBlue[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">                    child: <span class="keyword">new</span> Text(<span class="string">&#x27;list item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,</span><br><span class="line">                childCount: <span class="number">50</span> <span class="comment">//50个列表项</span></span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="6-滚动监听"><a href="#6-滚动监听" class="headerlink" title="(6)滚动监听"></a>(6)滚动监听</h5><ul>
<li><p>在flutter一般监听代码会放在initState中。因为initState不会多次执行。 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ScrollController _controller = <span class="keyword">new</span> ScrollController();</span><br><span class="line">  <span class="built_in">bool</span> showToTopBtn = <span class="keyword">false</span>; <span class="comment">//是否显示“返回到顶部”按钮</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">//监听滚动事件，打印滚动位置</span></span><br><span class="line">    _controller.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_controller.offset); <span class="comment">//打印滚动位置</span></span><br><span class="line">      <span class="keyword">if</span> (_controller.offset &lt; <span class="number">1000</span> &amp;&amp; showToTopBtn) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_controller.offset &gt;= <span class="number">1000</span> &amp;&amp; showToTopBtn == <span class="keyword">false</span>) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="5-多功能组件"><a href="#5-多功能组件" class="headerlink" title="5.多功能组件"></a>5.多功能组件</h4><ul>
<li>在flutter中，一切皆组件。所谓的功能型组件其实指的是如事件监听、数据存储等。</li>
</ul>
<h5 id="1-导航返回拦截WillPopScope"><a href="#1-导航返回拦截WillPopScope" class="headerlink" title="(1)导航返回拦截WillPopScope"></a>(1)导航返回拦截WillPopScope</h5><ul>
<li><p>有时候点击两次过快时可能是误点需要做处理 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">WillPopScope(</span><br><span class="line">        onWillPop: () <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (_lastPressedAt == <span class="keyword">null</span> ||</span><br><span class="line">              <span class="built_in">DateTime</span>.now().difference(_lastPressedAt) &gt; <span class="built_in">Duration</span>(seconds: <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">//两次点击间隔超过1秒则重新计时</span></span><br><span class="line">            _lastPressedAt = <span class="built_in">DateTime</span>.now();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Text(<span class="string">&quot;1秒内连续按两次返回键退出&quot;</span>),</span><br><span class="line">        )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<ul>
<li>onWillPop是一个回调函数，当用户点击返回按钮时调用（包括导航返回按钮及Android物理返回按钮），该回调需要返回一个Future对象，如果返回的Future最终值为false时，则当前路由不出栈(不会返回)，最终值为true时，当前路由出栈退出。我们需要提供这个回调来决定是否退出。</li>
</ul>
</li>
</ul>
<h5 id="2-数据共享"><a href="#2-数据共享" class="headerlink" title="(2)数据共享"></a>(2)数据共享</h5><ul>
<li><p><code>InheritedWidget</code>是Flutter中非常重要的一个功能型组件，它提供了一种数据在widget树中从上到下传递、共享的方式 </p>
</li>
<li><p>flutter中文网样例的地址<code>https://book.flutterchina.club/chapter7/inherited_widget.html</code></p>
</li>
</ul>
<h5 id="3-主题Theme"><a href="#3-主题Theme" class="headerlink" title="(3)主题Theme"></a>(3)主题Theme</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ThemeData(&#123;</span><br><span class="line">  Brightness brightness, <span class="comment">//深色还是浅色</span></span><br><span class="line">  MaterialColor primarySwatch, <span class="comment">//主题颜色样本，见下面介绍</span></span><br><span class="line">  Color primaryColor, <span class="comment">//主色，决定导航栏颜色</span></span><br><span class="line">  Color accentColor, <span class="comment">//次级色，决定大多数Widget的颜色，如进度条、开关等。</span></span><br><span class="line">  Color cardColor, <span class="comment">//卡片颜色</span></span><br><span class="line">  Color dividerColor, <span class="comment">//分割线颜色</span></span><br><span class="line">  ButtonThemeData buttonTheme, <span class="comment">//按钮主题</span></span><br><span class="line">  Color cursorColor, <span class="comment">//输入框光标颜色</span></span><br><span class="line">  Color dialogBackgroundColor,<span class="comment">//对话框背景颜色</span></span><br><span class="line">  <span class="built_in">String</span> fontFamily, <span class="comment">//文字字体</span></span><br><span class="line">  TextTheme textTheme,<span class="comment">// 字体主题，包括标题、body等文字样式</span></span><br><span class="line">  IconThemeData iconTheme, <span class="comment">// Icon的默认样式</span></span><br><span class="line">  TargetPlatform platform, <span class="comment">//指定平台，应用特定平台控件风格</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>









































]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/Flutter%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h3 id="flutter-面试"><a href="#flutter-面试" class="headerlink" title="flutter 面试"></a>flutter 面试</h3><p>1.dart 的作用域</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dart 里面默认是公开的，私有变量使用下划线开头</span><br></pre></td></tr></table></figure>

<p>2.dart是不是单线程？如何运行的？</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)dart是单线程</span><br><span class="line">(<span class="number">2</span>)dart在单线程中是以消息循环机制来运行的，其中包括两个任务队列，</span><br><span class="line">一个是“微任务队列”microtask queue, 另一个叫做“事件队列”event queue</span><br><span class="line"></span><br><span class="line">入口函数 <span class="built_in">mian</span>()函数运行后，消息循环机制便启动了，首先会按照先进先出的</span><br><span class="line">顺序逐个执行微任务队列中的任务，当所有微任务队列中的任务执行完之后便开</span><br><span class="line">始执行事件队列的任务，事件队列中的任务执行完之后再去执行微任务队列中的</span><br><span class="line">任务，如此循环往复，生生不息。</span><br><span class="line">在Dart中，所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘</span><br><span class="line">制事件等，而微任务通常来源于Dart内部，并且微任务非常少，之所以如此，是</span><br><span class="line">因为微任务队列优先级高，如果微任务太多，执行时间总和就越久，事件队列任</span><br><span class="line">务的延迟也就越久，对于GUI应用来说最直观的表现就是比较卡，所以必须得保证</span><br><span class="line">微任务队列不会太长。值得注意的是，我们可以通过Future<span class="selector-class">.microtask</span>(…)方法</span><br><span class="line">向微任务队列插入一个任务。</span><br></pre></td></tr></table></figure>

<p>3.dart 多任务是如何并行的?他们之间是如何交互的？</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)dart不存在多线程，dart 提供另一个类似新线程，但是不共享内存独立运行</span><br><span class="line">的worker-<span class="built_in">isolate</span></span><br><span class="line">(<span class="number">2</span>)两个<span class="built_in">isolate</span>之间通过SendPort相互发送消息，通过ReceiveProt接受消息</span><br></pre></td></tr></table></figure>

<p>4.说一下dart异步编程中Future关键字</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">在dart中通常使用<span class="keyword">Future</span>来执行异步或者延时操作</span><br></pre></td></tr></table></figure>

<p>5.说一下Dart异步编程中的 Stream数据流？ </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">dart中<span class="built_in">Stream</span> 和Future 都是解决异步的工具， 不同是<span class="built_in">Stream</span>可以接受多个异步</span><br><span class="line">的结果，而Future只能接受一个异步结果。<span class="number">0</span></span><br><span class="line"><span class="built_in">Stream</span> 的创建可以使用 <span class="built_in">Stream</span>.fromFuture，也可以使用 StreamController </span><br><span class="line">来创建和控制。还有一个注意点是：普通的 <span class="built_in">Stream</span> 只可以有一个订阅者，如果想</span><br><span class="line">要多订阅的话，要使用 <span class="built_in">asBroadcastStream</span>()。</span><br></pre></td></tr></table></figure>

<p>6.Stream 有哪两种订阅模式？分别是怎么调用的？</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Stream</span> 有两种订阅模式：单订阅(single) 和 多订阅（broadcast）。单订阅就</span><br><span class="line">是只能有一个订阅者，而广播是可以有多个订阅者。这就有点类似于消息服务（Message</span><br><span class="line">Service）的处理模式。单订阅类似于点对点，在订阅者出现之前会持有数据，在</span><br><span class="line">订阅者出现之后就才转交给它。而广播类似于发布订阅模式，可以同时有多个订阅者，</span><br><span class="line">当有数据时就会传递给所有的订阅者，而不管当前是否已有订阅者存在。</span><br><span class="line"><span class="built_in">Stream</span> 默认处于单订阅模式，所以同一个 stream 上的 listen 和其它大多数方法</span><br><span class="line">只能调用一次，调用第二次就会报错。但 <span class="built_in">Stream</span> 可以通过 <span class="built_in">transform</span>() 方法（返回</span><br><span class="line">另一个 <span class="built_in">Stream</span>）进行连续调用。通过 <span class="built_in">Stream</span>.<span class="built_in">asBroadcastStream</span>() 可以将一个单</span><br><span class="line">订阅模式的 <span class="built_in">Stream</span> 转换成一个多订阅模式的 <span class="built_in">Stream</span>，isBroadcast 属性可以判断</span><br><span class="line">当前 <span class="built_in">Stream</span> 所处的模式。</span><br></pre></td></tr></table></figure>

<p>7.说一下mixin机制？</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mixin</span> 是Dart <span class="number">2.1</span> 加入的特性，以前版本通常使用<span class="keyword">abstract</span> <span class="keyword">class</span>代替。简单来说，</span><br><span class="line"><span class="symbol">mixin</span>是为了解决继承方面的问题而引入的机制，<span class="symbol">Dart</span>为了支持多重继承，引入了<span class="symbol">mixin</span></span><br><span class="line">关键字，它最大的特殊处在于：<span class="symbol">mixin</span>定义的类不能有构造方法，这样可以避免继承多个</span><br><span class="line">类而产生的父类构造方法冲突。</span><br><span class="line"><span class="symbol">mixins</span>的对象是类，<span class="symbol">mixins</span>绝不是继承，也不是接口，而是一种全新的特性，可以<span class="symbol">mixins</span></span><br><span class="line">多个类，<span class="symbol">mixins</span>的使用需要满足一定条件。</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h2><hr>
<h3 id="第一个网页的创建"><a href="#第一个网页的创建" class="headerlink" title="第一个网页的创建"></a>第一个网页的创建</h3><h3 id="网页文件的结构"><a href="#网页文件的结构" class="headerlink" title="网页文件的结构"></a>网页文件的结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>网页当中，所有的结构代码都是以标签的形式出式的</p>
<p>什么是标签呢?</p>
<p>标签以‘&lt;’开始,以’&gt;’结束</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>标签分为开始标签与结束标签，结束标签比开始标签多了个”/“</p>
</blockquote>
<p><strong>总结</strong>：</p>
<ol>
<li><p>网页最开始的标签是<code>&lt;!DOCTYPE html&gt;</code>用于声明当前文档是一个网页文档</p>
</li>
<li><p>网页的根标签是<code>&lt;html</code>&gt;</p>
</li>
<li><p>网页有开始标签与结束标签</p>
</li>
<li><p>网页有头部标签<code>&lt;head&gt;</code>与<code>&lt;body&gt;</code> 主体标签</p>
</li>
<li><p>网页的标签是title标签</p>
</li>
<li><p>网页设置中文</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>:imp:<strong>思考</strong>：  能否在刚刚的网页结构代码里面，找出一些不同点？？</p>
</li>
</ol>
<p><font color="red">答:</font>在刚刚的代码里面,我们看到，meta标签它只出现了一次，而其它的标签却出现了两次，这是为什么呢？</p>
<hr>
<h3 id="网页当中的标签类型"><a href="#网页当中的标签类型" class="headerlink" title="网页当中的标签类型"></a>网页当中的标签类型</h3><p>在HTML网页里面，网页的标签类型大体为分两大类，分别是以HTML，BODY等这些标签相同的，它们叫双标签，还有以meta这种情况相似的，它们叫单标签</p>
<h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><p>成双成对出现的，我们叫双标签  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><p>标题标签用于在网页当中设置标题使用，它使用H开头，后面加数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>一号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>二号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>三号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>四号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结</strong>：</p>
<ul>
<li>网页当中，存在六级标题,其中数字越大，字体越小</li>
<li>align是标题的属性，它有left/right/center这个三个位置，用于设置居左/右/中</li>
<li>dir全称direction指方向，ltr代表left to right 从左到右，rtl代表right to left从右向左</li>
</ul>
</blockquote>
<h4 id="字体标签"><a href="#字体标签" class="headerlink" title="字体标签"></a>字体标签</h4><p>在网页当中，我们可以通过标签来设置字体的样式与字体的颜色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1&quot;</span>&gt;</span>今天天气不错，学生很帅也很漂亮<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span>&gt;</span>今天天气不错，学生很帅也很漂亮<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结</strong>：</p>
<ul>
<li>color用于设置字体的颜色</li>
<li>face用于设置字体的样式 </li>
<li>size用于设置字体的大小，数值越大，字体越大，最小为1，最大为7</li>
</ul>
</blockquote>
<h4 id="特殊文字样式"><a href="#特殊文字样式" class="headerlink" title="特殊文字样式"></a>特殊文字样式</h4><table>
<thead>
<tr>
<th>样式</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td><code>&lt;b&gt;&lt;strong&gt;</code></td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;u&gt;</code></td>
</tr>
<tr>
<td>斜体</td>
<td><code>&lt;i&gt;&lt;em&gt;&lt;cite&gt;</code></td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;strike&gt;&lt;del&gt;</code></td>
</tr>
<tr>
<td>版权标志</td>
<td><code>&amp;copy;</code></td>
</tr>
<tr>
<td>商标标志</td>
<td><code>&amp;reg;</code></td>
</tr>
<tr>
<td>上角标</td>
<td><code>&lt;sup&gt;</code></td>
</tr>
<tr>
<td>下角标</td>
<td><code>&lt;sub&gt;</code></td>
</tr>
<tr>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
</tr>
</tbody></table>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>有序列表它是一对父子标签，它是通过ol与li组合完成</li>
<li>里面的每一项都是通过li来标记完成的</li>
<li>通过在type上面设置类型，可以把li每一项前面的序号改变掉</li>
</ol>
</blockquote>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据列表"><a href="#数据列表" class="headerlink" title="数据列表"></a>数据列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>张七<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>胡八<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="列表扩展"><a href="#列表扩展" class="headerlink" title="列表扩展"></a>列表扩展</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>李文滔<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>标哥<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>张成<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>黄淑玲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>李新月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>黄静<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过点击上面的男生 或 女生 ，可以展开详细信息</p>
<p>summary是用于设置标题的</p>
<p>ul则是展开以后的内容</p>
</blockquote>
<h4 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h4><p>在网页当中，我们会看到有很多很多的链接，这些链接都是通过一种特殊标签来完成的，它就是a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>a标签里面的文字是显示在页面上面的，如“百度一下，你就知道”这会显示在页面上面</li>
<li>href属性则用于用户点击以后要跳转的网站</li>
<li>target指定打开网页的位置<ul>
<li><code>_blank</code>在新的浏览器里面去打开</li>
<li><code>_self</code>当前的网页打开</li>
<li><code>iframe的name值</code>，这个值比较特殊，它可以把某一个网址在iframe当中去打开</li>
<li><code>_parent</code>值在父级网页里面去打开</li>
<li><code>_top</code>直接跳过所有中间的iframe,到最外层打开网页</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="iframe网页嵌入标签"><a href="#iframe网页嵌入标签" class="headerlink" title="iframe网页嵌入标签"></a>iframe网页嵌入标签</h4><p>通过iframe我们在一个网页当中嵌入另外一个网页，它一般情况下可以与上面的a标签结合在一起使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;网页地址&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>src用于要嵌入的网页网址，可以给任何网页地址</li>
<li>width/height用于设置iframe的大小</li>
<li>frameborder，用于设置是否保存存边框，如果设置为<code>no</code>或0</li>
<li>name用于设置iframe的名称，配置a标签一起使用</li>
</ul>
</blockquote>
<h4 id="map标签"><a href="#map标签" class="headerlink" title="map标签"></a>map标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/01.jpg&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#map1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;map1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;map1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--矩形</span></span><br><span class="line"><span class="comment">coords坐标，shape形状   rect是rectangle的简称，矩形的意思</span></span><br><span class="line"><span class="comment">poly 多边形</span></span><br><span class="line"><span class="comment">coords针对不同的图形有不同值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;area coords=&quot;0,0,400,400&quot; shape=&quot;rect&quot; href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;area shape=&quot;circle&quot; coords=&quot;210,570,90&quot; href=&quot;http://lovesnsfi.github.io&quot; target=&quot;_self&quot; /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;poly&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,100,100,100,200,200,0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>shape属性用于说明你的点击区域的形状，它有三个值<ul>
<li>rect矩形</li>
<li>circle圆形</li>
<li>poly多边形</li>
</ul>
</li>
<li>coords代表坐标值</li>
<li>href 代表点击以后要跳转的地方</li>
<li>target代表打开的方式</li>
</ul>
<p><strong>重点</strong>：<code>usemap</code>在这个地方使用的是#+id名</p>
<h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><p>段落是指网页当中的大段文字内容，它使用p标签来进行</p>
<p><strong>特点</strong>：</p>
<ol>
<li>段落与段落这间会存在空隙</li>
<li>段落完成以后会从头开始</li>
<li>它可以结合<code>small</code>与 <code>big</code>标签来进行一些简单的配置使用，使用文字做到缩小或放大的处理</li>
</ol>
<h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><p>表格标签是网页进行数据展示和<strong>简单布局</strong>的一种常用标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>H1904班学员信息<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">bgcolor</span>=<span class="string">&quot;deeppink&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--先加载行   tr:table row--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格的头部th:  table head--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;250px&quot;</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--td: table data--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>杨标<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>爱书，学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;90px&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--td: table data--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>李文滔<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span>抽烟，喝酒，烫头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<ol>
<li>table表格标签 <ul>
<li>border用于设置表格是否有边框</li>
<li>width用于设置表格的宽度</li>
<li>align用于设置整个表格的横向排列</li>
<li>cellspacing用于设置单元格与单元格之间的间距</li>
<li>cellpadding用于设置单元格里面的<strong><font color="red">内间距</font></strong></li>
<li>bgcolor用于设置背景色，它可以设置整个表格，也可以设置某一行，更可以设置某一个单元格</li>
<li>caption表格里面的标签 ，用于设置表格的标题</li>
<li>colgroup用于标记列,col代表里面的每一列</li>
</ul>
</li>
<li>tr行的标签</li>
<li>th表格头部的标签<ul>
<li>width属性设置列的宽度</li>
</ul>
</li>
<li>td表格内容的标签<ul>
<li>align设置左右的排列</li>
<li>valign用于设置垂直的排列，它的上是top,下是bottom， 中间是middle或center</li>
</ul>
</li>
</ol>
<p><strong>总结</strong>：</p>
<ol>
<li>表格里面的行tr是用于设置高度的，列td或th是用于设置宽度的</li>
</ol>
<hr>
<h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><p>只出现一次的，我们叫单标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span>  这是html5的标准</span><br><span class="line"><span class="tag">&lt;<span class="name">标签名</span>/&gt;</span>  这是xthml的标准（老的标准）</span><br></pre></td></tr></table></figure>

<h4 id="线条标签"><a href="#线条标签" class="headerlink" title="线条标签"></a>线条标签</h4><p>我们使用hr来进行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span> <span class="attr">hspace</span>=<span class="string">&quot;100px&quot;</span>  <span class="attr">vspace</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是标哥的笔记图片&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;笔记图片&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src指图片地址</li>
<li>width/ height设置图片大小</li>
<li>alt当图片显示不出来的时候，这段文字就是显示出来，它是一个提示文字</li>
<li>title鼠标放上去以后的提示信息</li>
<li>hspace距离左边的距离</li>
<li>vspace距离上边的距离</li>
<li>border图片的边框</li>
</ul>
<p>上面的属性当中，常用的就两个,一个src，再一个alt,其它的后期都会通过CSS来进行</p>
<hr>
<h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><p>只要在网页当中需要我们去填写的东西，我们叫表单元素</p>
<h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h4><p>input标签是网页上面的输入框元素，它提供一个输入框让用户输入相关的信息</p>
<h5 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的输入如果不加任何type属性则代表文本输入框 ，其实它默认有一个属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;autofocus&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>文本输入框与密码输入框还有一些共同的属性，我们看一下，有哪些</strong></p>
<blockquote>
<ol>
<li>placeholder占位符属性，当用户在里在输入了内容以后，占位符不显示，如果为空，则显示出来，提示给用户看</li>
<li>autofocus当页面加载的时候，自动获取光标，但要注意，一个表单里面，只能有一个元素使用这个属性，不能多个表单元素一起使用</li>
<li>name属性主要用于后端开发的时候使用与后端语言进行交互的时候（Java，php,python等），后台需要取值的时候使用</li>
</ol>
</blockquote>
<h5 id="数据输入框"><a href="#数据输入框" class="headerlink" title="数据输入框"></a>数据输入框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">step</span>=<span class="string">&quot;5&quot;</span> <span class="attr">max</span>=<span class="string">&quot;30&quot;</span> <span class="attr">min</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>value代表当前值</li>
<li>step代表每次增加或减少的值</li>
<li>max最大值，min最小值</li>
</ul>
<h5 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>step每 次改变的值的大小</li>
<li>min最小值，max最大值</li>
</ul>
<p>还有type=”url” tpye=”email”等，因为兼容性问题，此处不做要求</p>
<p>除上上面的几种输入型的表单以后，还有一些选择型的表单元素</p>
<h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别：<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span></span><br><span class="line">    男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span></span><br><span class="line">    女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>label标签一般与单选标签结合起来一起使用</li>
<li>如果默认某一个要选中，则使用 checked属性</li>
<li>单选按钮如果要进行编组，则需要把它们的 name值的属性设置为一样</li>
<li>label的for属性指向radio的id名</li>
</ul>
</blockquote>
<h5 id="多选按钮"><a href="#多选按钮" class="headerlink" title="多选按钮"></a>多选按钮</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">爱好：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reading&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;reading&quot;</span>&gt;</span></span><br><span class="line">    看书</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>睡觉</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>/&gt;</span>打篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>玩游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>逛街</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span> /&gt;</span>扯淡</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多选按钮与单选按钮在此处的用法相同，都是通过checked来进行默认选中，都是通过label标签来进行组合，同样也是通过name来进行编组</p>
</blockquote>
<h4 id="下拉选项框"><a href="#下拉选项框" class="headerlink" title="下拉选项框"></a>下拉选项框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">籍贯：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	size=&quot;7&quot; multiple=&quot;multiple&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;南方&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>广东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>福建省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>湖南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>去南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北方&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>内蒙古<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>河南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>辽宁省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>吉宁省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>下拉选择框是一个组合标签 ，它通过与option的结合来进行使用，option代表每一个选项</li>
<li>option如果默认要选中某一个则使用<font color="red"> <strong>selected</strong></font></li>
<li>size属性可以设置这个选项一次性显示 多少个</li>
<li>multiple这个属性代表多选</li>
<li>optgroup标签可以将 option选项进行分组，以方便用户选择</li>
</ul>
</blockquote>
<h4 id="按钮标签"><a href="#按钮标签" class="headerlink" title="按钮标签"></a>按钮标签</h4><p>在网页里面，按钮主要是以下几种情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我要注册账号&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>type=”button”它只是一个普通按钮 </p>
</li>
<li><p>submit默认会有一个中文名称叫提交</p>
<p>这个按钮会把你刚刚填写的当前表单里面的数据默认提交到浏览器地址栏，这个时候后台程序是可以接收到你刚刚提交的值</p>
</li>
<li><p>重置  对当前表单里面的内容进行恢复初始化</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;input type=&quot;reset&quot; /&gt;</span></span><br><span class="line"><span class="comment">像这种情况下的按钮，它的局限性非常高，如果没有CSS，那么，它就太单一了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复合形式的按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/03.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 这种情况下面的button它是一个双标签，正是因为是一个双标签 ，所以，它可以根据不同标签来组成不同的样式与结构，我推荐大家使用此标签</p>
<h4 id="文本域标签"><a href="#文本域标签" class="headerlink" title="文本域标签"></a>文本域标签</h4><p><code>input type=&quot;text&quot;</code>它只是一个单行的输入框 ，解决不了输入大段文字的需求，这个时候，我们就需要使用另一个标签来替代，这就是文本域标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>rows指代行数，cols指代列数</li>
</ul>
<hr>
<p>上面的标签是一些常见的表单元素标签，其中还有一些公共的属性给大家列举一下</p>
<h4 id="表单元素公共属性"><a href="#表单元素公共属性" class="headerlink" title="表单元素公共属性"></a>表单元素公共属性</h4><ol>
<li>value属性，每个表单元素都有一个value属性，用于设置或获取这个表单元素的值</li>
<li>readonly属性，设置表单元素为只读</li>
<li>disabled禁用当前表单元素</li>
<li>required必填项（具有兼容性，IE低版本不支持），用于指定在提交表单的时候，当前项是否必填</li>
</ol>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol>
<li>marquee标签</li>
<li>属性 hidden 隐藏，属性contenteditable内容可编辑,draggable可拖动</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/React%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="React基础"><a href="#React基础" class="headerlink" title="React基础"></a>React基础</h2><p>学个鸡儿999</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/Vue%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/Vue%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一、代码层面的优化"><a href="#一、代码层面的优化" class="headerlink" title="一、代码层面的优化"></a>一、代码层面的优化</h2><h3 id="1-1、v-if-和-v-show-区分使用场景"><a href="#1-1、v-if-和-v-show-区分使用场景" class="headerlink" title="1.1、v-if 和 v-show 区分使用场景"></a>1.1、v-if 和 v-show 区分使用场景</h3><p><strong>v-if</strong> 是 <strong>真正</strong> 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p><strong>v-show</strong> 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p>
<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>
<h3 id="1-2、computed-和-watch-区分使用场景"><a href="#1-2、computed-和-watch-区分使用场景" class="headerlink" title="1.2、computed 和 watch  区分使用场景"></a>1.2、computed 和 watch  区分使用场景</h3><p><strong>computed：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p>
<p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>
<p><strong>运用场景：</strong></p>
<ul>
<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>
<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>
</ul>
<h3 id="1-3、v-for-遍历必须为-item-添加-key，且避免同时使用-v-if"><a href="#1-3、v-for-遍历必须为-item-添加-key，且避免同时使用-v-if" class="headerlink" title="1.3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if"></a>1.3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</h3><p><strong>（1）v-for 遍历必须为 item 添加 key</strong></p>
<p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p>
<p><strong>（2）v-for 遍历避免同时使用 v-if</strong></p>
<p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;user in activeUsers&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; user.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">activeUsers</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">	 <span class="keyword">return</span> user.<span class="property">isActive</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>不推荐：</strong></p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-if</span>=<span class="string">&quot;user.isActive&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">user.name</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">复制代码</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4、长列表性能优化"><a href="#1-4、长列表性能优化" class="headerlink" title="1.4、长列表性能优化"></a>1.4、长列表性能优化</h3><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    users: &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  async created() &#123;</span><br><span class="line">    const users = await axios.<span class="keyword">get</span>(&quot;/api/users&quot;);</span><br><span class="line">    this.users = <span class="keyword">Object</span>.<span class="keyword">freeze</span>(users);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="1-5、事件的销毁"><a href="#1-5、事件的销毁" class="headerlink" title="1.5、事件的销毁"></a>1.5、事件的销毁</h3><p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。 如果在 js 内使用 addEventListene 等方式是不会自动销毁的，我们需要在组件销毁时手动移除这些事件的监听，以免造成内存泄露，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="built_in">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, this<span class="selector-class">.click</span>, false)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="built_in">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, this<span class="selector-class">.click</span>, false)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="1-6、图片资源懒加载"><a href="#1-6、图片资源懒加载" class="headerlink" title="1.6、图片资源懒加载"></a>1.6、图片资源懒加载</h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p>
<p>（1）安装插件</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install vue-lazyload --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（2）在入口文件 man.js 中引入并使用</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyload <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>然后再 vue 中直接使用</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Vue.<span class="keyword">use</span>(VueLazyload)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>或者添加自定义选项</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">preLoad: 1.3,</span><br><span class="line"><span class="keyword">error: </span>&#x27;dist/error.png&#x27;,</span><br><span class="line">loading: &#x27;dist/loading.gif&#x27;,</span><br><span class="line">attempt: 1</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（3）在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">v-lazy</span>=<span class="string">&quot;/static/img/1.png&quot;</span>&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>以上为 vue-lazyload 插件的简单使用，如果要看插件的更多参数选项，可以查看 vue-lazyload 的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fhilongjw%2Fvue-lazyload">github 地址</a>。</p>
<h3 id="1-7、路由懒加载"><a href="#1-7、路由懒加载" class="headerlink" title="1.7、路由懒加载"></a>1.7、路由懒加载</h3><p>Vue  是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。</p>
<p><strong>路由懒加载：</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br><span class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">&#x27;/foo&#x27;</span>, component: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="1-8、第三方插件的按需引入"><a href="#1-8、第三方插件的按需引入" class="headerlink" title="1.8、第三方插件的按需引入"></a>1.8、第三方插件的按需引入</h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 <code>babel-plugin-component</code> ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：</p>
<p>（1）首先，安装 <code>babel-plugin-component</code> ：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-plugin-component </span>-D</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（2）然后，将 .babelrc 修改为：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [[<span class="string">&quot;es2015&quot;</span>, &#123; <span class="string">&quot;modules&quot;</span>: false &#125;]],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（3）在 main.js 中引入部分组件：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, <span class="keyword">Select</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> Vue.use(Button)</span><br><span class="line"> Vue.use(<span class="keyword">Select</span>)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="1-9、优化无限列表性能"><a href="#1-9、优化无限列表性能" class="headerlink" title="1.9、优化无限列表性能"></a>1.9、优化无限列表性能</h3><p>如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。 你可以参考以下开源项目 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftangbc%2Fvue-virtual-scroll-list">vue-virtual-scroll-list</a> 和 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FAkryum%2Fvue-virtual-scroller">vue-virtual-scroller</a>  来优化这种无限列表的场景的。</p>
<h3 id="1-10、服务端渲染-SSR-or-预渲染"><a href="#1-10、服务端渲染-SSR-or-预渲染" class="headerlink" title="1.10、服务端渲染 SSR or 预渲染"></a>1.10、服务端渲染 SSR or 预渲染</h3><p>服务端渲染是指 Vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p>
<p><strong>（1）服务端渲染的优点：</strong></p>
<ul>
<li>更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</li>
<li>更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li>
</ul>
<p><strong>（2）服务端渲染的缺点：</strong></p>
<ul>
<li>更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</li>
<li>更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源，因此如果你预料在高流量环境下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>
</ul>
<p>如果你的项目的 SEO 和 首屏渲染是评价项目的关键指标，那么你的项目就需要服务端渲染来帮助你实现最佳的初始加载性能和 SEO，具体的 Vue SSR 如何实现，可以参考作者的另一篇文章《<a href="https://juejin.cn/post/6844903824956588040">Vue SSR 踩坑之旅</a>》。如果你的 Vue 项目只需改善少数营销页面（例如  <code>/， /about， /contac</code>t 等）的 SEO，那么你可能需要<strong>预渲染</strong>，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点，具体你可以使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fchrisvfritz%2Fprerender-spa-plugin">prerender-spa-plugin</a> 就可以轻松地添加预渲染 。</p>
<h2 id="二、Webpack-层面的优化"><a href="#二、Webpack-层面的优化" class="headerlink" title="二、Webpack 层面的优化"></a>二、Webpack 层面的优化</h2><h3 id="2-1、Webpack-对图片进行压缩"><a href="#2-1、Webpack-对图片进行压缩" class="headerlink" title="2.1、Webpack 对图片进行压缩"></a>2.1、Webpack 对图片进行压缩</h3><p>在 vue 项目中除了可以在 <code>webpack.base.conf.js</code> 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 <code>image-webpack-loader</code>来压缩图片：</p>
<p>（1）首先，安装 image-webpack-loader  ：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install <span class="built_in">image</span>-webpack-loader --<span class="built_in">save</span>-dev</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（2）然后，在 webpack.base.conf.js  中进行配置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">    loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: <span class="number">10000</span>,</span><br><span class="line">      name: utils.<span class="built_in">assetsPath</span>(<span class="string">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        bypassOnDebug: true,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="2-2、减少-ES6-转为-ES5-的冗余代码"><a href="#2-2、减少-ES6-转为-ES5-的冗余代码" class="headerlink" title="2.2、减少 ES6 转为 ES5 的冗余代码"></a>2.2、减少 ES6 转为 ES5 的冗余代码</h3><p>Babel 插件会在将 ES6 代码转换成 ES5 代码时会注入一些辅助函数，例如下面的 ES6 代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWebpack</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;...&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>这段代码再被转换成能正常运行的 ES5 代码时需要以下两个辅助函数：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">babel-<span class="keyword">runtime</span><span class="regexp">/helpers/</span>createClass  <span class="comment">// 用于实现 class 语法</span></span><br><span class="line">babel-<span class="keyword">runtime</span><span class="regexp">/helpers/i</span>nherits  <span class="comment">// 用于实现 extends 语法    </span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>在默认情况下， Babel 会在每个输出文件中内嵌这些依赖的辅助函数代码，如果多个源代码文件都依赖这些辅助函数，那么这些辅助函数的代码将会出现很多次，造成代码冗余。为了不让这些辅助函数的代码重复出现，可以在依赖它们时通过 <code>require(&#39;babel-runtime/helpers/createClass&#39;)</code> 的方式导入，这样就能做到只让它们出现一次。<code>babel-plugin-transform-runtime</code> 插件就是用来实现这个作用的，将相关辅助函数进行替换成导入语句，从而减小 babel 编译出来的代码的文件大小。</p>
<p>（1）首先，安装 <code>babel-plugin-transform-runtime</code> ：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-<span class="attribute">transform</span>-runtime <span class="attr">--save-dev</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>（2）然后，修改 .babelrc  配置文件为：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;transform-runtime&quot;</span></span><br><span class="line">]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>如果要看插件的更多详细内容，可以查看babel-plugin-transform-runtime 的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fbabeljs.io%2Fdocs%2Fen%2Fbabel-plugin-transform-runtime">详细介绍</a>。</p>
<h3 id="2-3、提取公共代码"><a href="#2-3、提取公共代码" class="headerlink" title="2.3、提取公共代码"></a>2.3、提取公共代码</h3><p>如果项目中没有去将每个页面的第三方库和公共模块提取出来，则项目会存在以下问题：</p>
<ul>
<li>相同的资源被重复加载，浪费用户的流量和服务器的成本。</li>
<li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</li>
</ul>
<p>所以我们需要将多个页面的公共代码抽离成单独的文件，来优化以上问题 。Webpack 内置了专门用于提取多个Chunk 中的公共部分的插件 CommonsChunkPlugin，我们在项目中 CommonsChunkPlugin 的配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有在 package.json 里面依赖的包，都会被打包进 vendor.js 这个文件中。</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">  <span class="attr">minChunks</span>: <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, count</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">resource</span> &amp;&amp;</span><br><span class="line">      <span class="regexp">/\.js$/</span>.<span class="title function_">test</span>(<span class="variable language_">module</span>.<span class="property">resource</span>) &amp;&amp;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">resource</span>.<span class="title function_">indexOf</span>(</span><br><span class="line">        path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>)</span><br><span class="line">      ) === <span class="number">0</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 抽取出代码模块的映射关系</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>如果要看插件的更多详细内容，可以查看 CommonsChunkPlugin 的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fcommons-chunk-plugin%2F">详细介绍</a>。</p>
<h3 id="2-4、模板预编译"><a href="#2-4、模板预编译" class="headerlink" title="2.4、模板预编译"></a>2.4、模板预编译</h3><p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。</p>
<p>预编译模板最简单的方式就是使用<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fsingle-file-components.html">单文件组件</a>——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p>
<p>如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fktsn%2Fvue-template-loader">vue-template-loader</a>，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。</p>
<h3 id="2-5、提取组件的-CSS"><a href="#2-5、提取组件的-CSS" class="headerlink" title="2.5、提取组件的 CSS"></a>2.5、提取组件的 CSS</h3><p>当使用单文件组件时，组件内的 CSS 会以 style 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，如果你使用服务端渲染，这会导致一段 “无样式内容闪烁 (fouc) ” 。将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p>
<p>查阅这个构建工具各自的文档来了解更多：</p>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fvue-loader.vuejs.org%2Fzh-cn%2Fconfigurations%2Fextract-css.html">webpack + vue-loader</a> ( vue-cli 的 webpack 模板已经预先配置好)</li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvueify%23css-extraction">Browserify + vueify</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.github.io%2Frollup-plugin-vue%2F%23%2Fen%2F2.3%2F%3Fid%3Dcustom-handler">Rollup + rollup-plugin-vue</a></li>
</ul>
<h3 id="2-6、优化-SourceMap"><a href="#2-6、优化-SourceMap" class="headerlink" title="2.6、优化 SourceMap"></a>2.6、优化 SourceMap</h3><p>我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩、去掉多余的空格、babel编译化后，最终将编译得到的代码会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有 bug的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发来说不好调式定位问题，因此 sourceMap 出现了，它就是为了解决不好调式代码问题的。</p>
<p>SourceMap 的可选值如下（+ 号越多，代表速度越快，- 号越多，代表速度越慢, o 代表中等速度 ）</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c924653d8000ec~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<p><strong>开发环境推荐： cheap-module-eval-source-map</strong></p>
<p><strong>生产环境推荐： cheap-module-source-map</strong></p>
<p>原因如下：</p>
<ul>
<li><strong>cheap</strong>： 源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加 cheap 的基本类型来忽略打包前后的列信息；</li>
<li><strong>module</strong> ：不管是开发环境还是正式环境，我们都希望能定位到bug的源代码具体的位置，比如说某个 Vue 文件报错了，我们希望能定位到具体的 Vue 文件，因此我们也需要 module 配置；</li>
<li><strong>soure-map</strong> ：source-map 会为每一个打包后的模块生成独立的 soucemap 文件 ，因此我们需要增加source-map 属性；</li>
<li><strong>eval-source-map</strong>：eval 打包代码的速度非常快，因为它不生成 map 文件，但是可以对 eval 组合使用 eval-source-map 使用会将 map 文件以 DataURL 的形式存在打包后的 js 文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快。</li>
</ul>
<h3 id="2-7、构建结果输出分析"><a href="#2-7、构建结果输出分析" class="headerlink" title="2.7、构建结果输出分析"></a>2.7、构建结果输出分析</h3><p>Webpack 输出的代码可读性非常差而且文件非常大，让我们非常头疼。为了更简单、直观地分析输出结果，社区中出现了许多可视化分析工具。这些工具以图形的方式将结果更直观地展示出来，让我们快速了解问题所在。接下来讲解我们在 Vue 项目中用到的分析工具：<code>webpack-bundle-analyzer</code> 。</p>
<p>我们在项目中 <code>webpack.prod.conf.js</code> 进行配置：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">if (<span class="built_in">config</span>.<span class="keyword">build.bundleAnalyzerReport) </span>&#123;</span><br><span class="line">  var <span class="keyword">BundleAnalyzerPlugin </span>=   require(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="keyword">BundleAnalyzerPlugin;</span></span><br><span class="line"><span class="keyword"></span>  webpackConfig.plugins.push(new <span class="keyword">BundleAnalyzerPlugin());</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>执行  <code>$ npm run build --report</code>  后生成分析报告如下：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c924653df09147~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<h3 id="2-8、Vue-项目的编译优化"><a href="#2-8、Vue-项目的编译优化" class="headerlink" title="2.8、Vue 项目的编译优化"></a>2.8、Vue 项目的编译优化</h3><p>如果你的 Vue 项目使用 Webpack 编译，需要你喝一杯咖啡的时间，那么也许你需要对项目的 Webpack 配置进行优化，提高 Webpack 的构建效率。具体如何进行 Vue 项目的 Webpack 构建优化，可以参考作者的另一篇文章<a href="https://juejin.cn/post/6844903745810104328">《 Vue 项目 Webpack 优化实践》</a></p>
<h2 id="三、基础的-Web-技术优化"><a href="#三、基础的-Web-技术优化" class="headerlink" title="三、基础的 Web 技术优化"></a>三、基础的 Web 技术优化</h2><h3 id="3-1、开启-gzip-压缩"><a href="#3-1、开启-gzip-压缩" class="headerlink" title="3.1、开启 gzip 压缩"></a>3.1、开启 gzip 压缩</h3><p>gzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome，firefox，IE等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持，gzip 压缩效率非常高，通常可以达到 70% 的压缩率，也就是说，如果你的网页有 30K，压缩之后就变成了 9K 左右</p>
<p>以下我们以服务端使用我们熟悉的 express 为例，开启 gzip 非常简单，相关步骤如下：</p>
<ul>
<li>安装：</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install compression <span class="comment">--save</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<ul>
<li>添加代码逻辑：</li>
</ul>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">var</span> <span class="variable">compression</span> = <span class="function"><span class="title">require</span>(<span class="string">&#x27;compression&#x27;</span>);</span></span><br><span class="line"><span class="function"><span class="variable">var</span> <span class="variable">app</span> = <span class="title">express</span>();</span></span><br><span class="line"><span class="function"><span class="variable">app.use</span>(<span class="title">compression</span>())</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务，观察网络面板里面的 response header，如果看到如下红圈里的字段则表明 gzip 开启成功 ：</li>
</ul>
<p>  <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c924653ef48d24~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<h3 id="3-2、浏览器缓存"><a href="#3-2、浏览器缓存" class="headerlink" title="3.2、浏览器缓存"></a>3.2、浏览器缓存</h3><p>为了提高用户加载页面的速度，对静态资源进行缓存是非常必要的，根据是否需要重新向服务器发起请求来分类，将 HTTP 缓存规则分为两大类（强制缓存，对比缓存），如果对缓存机制还不是了解很清楚的，可以参考作者写的关于 HTTP 缓存的文章<a href="https://juejin.cn/post/6844903801778864136">《深入理解HTTP缓存机制及原理》</a>，这里不再赘述。</p>
<h3 id="3-3、CDN-的使用"><a href="#3-3、CDN-的使用" class="headerlink" title="3.3、CDN 的使用"></a>3.3、CDN 的使用</h3><p>浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。</p>
<h3 id="3-4、使用-Chrome-Performance-查找性能瓶颈"><a href="#3-4、使用-Chrome-Performance-查找性能瓶颈" class="headerlink" title="3.4、使用 Chrome Performance 查找性能瓶颈"></a>3.4、使用 Chrome Performance 查找性能瓶颈</h3><p>Chrome 的 Performance 面板可以录制一段时间内的 js 执行细节及时间。使用 Chrome 开发者工具分析页面性能的步骤如下。</p>
<ol>
<li>打开 Chrome 开发者工具，切换到 Performance 面板</li>
<li>点击 Record 开始录制</li>
<li>刷新页面或展开某个节点</li>
<li>点击 Stop 停止录制</li>
</ol>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c924653fbd6f8e~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、说说你对-SPA-单页面的理解，它的优缺点分别是什么？"><a href="#1、说说你对-SPA-单页面的理解，它的优缺点分别是什么？" class="headerlink" title="1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？"></a>1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p>
<p><strong>优点：</strong></p>
<ul>
<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li>
<li>基于上面一点，SPA 相对对服务器压力小；</li>
<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li>
<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li>
<li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li>
</ul>
<h2 id="2、v-show-与-v-if-有什么区别？"><a href="#2、v-show-与-v-if-有什么区别？" class="headerlink" title="2、v-show 与 v-if 有什么区别？"></a>2、v-show 与 v-if 有什么区别？</h2><p><strong>v-if</strong> 是<strong>真正</strong>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p><strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p>
<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>
<h2 id="3、Class-与-Style-如何动态绑定？"><a href="#3、Class-与-Style-如何动态绑定？" class="headerlink" title="3、Class 与 Style 如何动态绑定？"></a>3、Class 与 Style 如何动态绑定？</h2><p>Class 可以通过对象语法和数组语法进行动态绑定：</p>
<ul>
<li>对象语法：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;div</span> <span class="string">v-bind:class=&quot;&#123;</span> <span class="attr">active:</span> <span class="string">isActive,</span> <span class="attr">&#x27;text-danger&#x27;:</span> <span class="string">hasError</span> <span class="string">&#125;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">data:</span> &#123;</span><br><span class="line">  <span class="attr">isActive:</span> <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">hasError:</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组语法：</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:<span class="keyword">class</span>=&quot;[<span class="symbol">isActive</span> ? <span class="symbol">activeClass</span> : &#x27;&#x27;, <span class="symbol">errorClass</span>]&quot;&gt;&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="symbol">data: </span>&#123;</span><br><span class="line">  activeClass: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">  errorClass: <span class="string">&#x27;text-danger&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Style 也可以通过对象语法和数组语法进行动态绑定：</p>
<ul>
<li>对象语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> v-bind:style=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> v-bind:style=<span class="string">&quot;[styleColor, styleSize]&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  styleColor: &#123;</span><br><span class="line">     <span class="attribute">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">  styleSize:&#123;</span><br><span class="line">     fontSize:<span class="string">&#x27;23px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、怎样理解-Vue-的单向数据流？"><a href="#4、怎样理解-Vue-的单向数据流？" class="headerlink" title="4、怎样理解 Vue 的单向数据流？"></a>4、怎样理解 Vue 的单向数据流？</h2><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。</p>
<p>有两种常见的试图改变一个 prop 的情形 :</p>
<ul>
<li><strong>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。</strong> 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">props: [<span class="symbol">&#x27;initialCounter</span>&#x27;],</span><br><span class="line">data: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">&#123;</span></span><br><span class="line">    counter: this.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>这个 prop 以一种原始的值传入且需要进行转换。</strong> 在这种情况下，最好使用这个 prop 的值来定义一个计算属性</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">props: [<span class="symbol">&#x27;size</span>&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">this.size.trim().toLowerCase()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、computed-和-watch-的区别和运用的场景？"><a href="#5、computed-和-watch-的区别和运用的场景？" class="headerlink" title="5、computed 和 watch 的区别和运用的场景？"></a>5、computed 和 watch 的区别和运用的场景？</h2><p><strong>computed：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p>
<p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>
<p><strong>运用场景：</strong></p>
<ul>
<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>
<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>
</ul>
<h2 id="6、直接给一个数组项赋值，Vue-能检测到变化吗？"><a href="#6、直接给一个数组项赋值，Vue-能检测到变化吗？" class="headerlink" title="6、直接给一个数组项赋值，Vue 能检测到变化吗？"></a>6、直接给一个数组项赋值，Vue 能检测到变化吗？</h2><p>由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：</p>
<ul>
<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>
</ul>
<p>为了解决第一个问题，Vue 提供了以下操作方法：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// Vue.<span class="keyword">set</span></span><br><span class="line">Vue.<span class="keyword">set</span>(<span class="keyword">vm</span>.<span class="built_in">items</span>, indexOfItem, newValue)</span><br><span class="line">// <span class="keyword">vm</span>.$<span class="keyword">set</span>，Vue.<span class="keyword">set</span>的一个别名</span><br><span class="line"><span class="keyword">vm</span>.$<span class="keyword">set</span>(<span class="keyword">vm</span>.<span class="built_in">items</span>, indexOfItem, newValue)</span><br><span class="line">// Array.prototype.splice</span><br><span class="line"><span class="keyword">vm</span>.<span class="built_in">items</span>.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure>

<p>为了解决第二个问题，Vue 提供了以下操作方法：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(<span class="keyword">new</span><span class="type">Length</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7、谈谈你对-Vue-生命周期的理解？"><a href="#7、谈谈你对-Vue-生命周期的理解？" class="headerlink" title="7、谈谈你对 Vue 生命周期的理解？"></a>7、谈谈你对 Vue 生命周期的理解？</h2><p><strong>（1）生命周期是什么？</strong></p>
<p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>
<p><strong>（2）各个生命周期的作用</strong></p>
<table>
<thead>
<tr>
<th>生命周期</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>组件实例被创建之初，组件的属性生效之前</td>
</tr>
<tr>
<td>created</td>
<td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用：相关的 render 函数首次被调用</td>
</tr>
<tr>
<td>mounted</td>
<td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td>
</tr>
<tr>
<td>update</td>
<td>组件数据更新之后</td>
</tr>
<tr>
<td>activited</td>
<td>keep-alive 专属，组件被激活时调用</td>
</tr>
<tr>
<td>deactivated</td>
<td>keep-alive 专属，组件被销毁时调用</td>
</tr>
<tr>
<td>beforeDestory</td>
<td>组件销毁前调用</td>
</tr>
<tr>
<td>destoryed</td>
<td>组件销毁后调用</td>
</tr>
</tbody></table>
<p><strong>（3）生命周期示意图</strong></p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca74f183827f46~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<h2 id="8、Vue-的父组件和子组件生命周期钩子函数执行顺序？"><a href="#8、Vue-的父组件和子组件生命周期钩子函数执行顺序？" class="headerlink" title="8、Vue 的父组件和子组件生命周期钩子函数执行顺序？"></a>8、Vue 的父组件和子组件生命周期钩子函数执行顺序？</h2><p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p>
<ul>
<li><p>加载渲染过程</p>
<p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>
</li>
<li><p>子组件更新过程</p>
<p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>
</li>
<li><p>父组件更新过程</p>
<p>父 beforeUpdate -&gt; 父 updated</p>
</li>
<li><p>销毁过程</p>
<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>
</li>
</ul>
<h2 id="9、在哪个生命周期内调用异步请求？"><a href="#9、在哪个生命周期内调用异步请求？" class="headerlink" title="9、在哪个生命周期内调用异步请求？"></a>9、在哪个生命周期内调用异步请求？</h2><p>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</p>
<ul>
<li>能更快获取到服务端数据，减少页面 loading 时间；</li>
<li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>
</ul>
<h2 id="10、在什么阶段才能访问操作DOM？"><a href="#10、在什么阶段才能访问操作DOM？" class="headerlink" title="10、在什么阶段才能访问操作DOM？"></a>10、在什么阶段才能访问操作DOM？</h2><p>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。vue 具体的生命周期示意图可以参见如下，理解了整个生命周期各个阶段的操作，关于生命周期相关的面试题就难不倒你了。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca74f183827f46~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<h2 id="11、父组件可以监听到子组件的生命周期吗？"><a href="#11、父组件可以监听到子组件的生命周期吗？" class="headerlink" title="11、父组件可以监听到子组件的生命周期吗？"></a>11、父组件可以监听到子组件的生命周期吗？</h2><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Child</span> <span class="meta">@mounted</span>=<span class="string">&quot;doSomething&quot;</span>/&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Child</span> <span class="meta">@hook</span>:mounted=<span class="string">&quot;doSomething&quot;</span> &gt;&lt;/<span class="title class_">Child</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父组件监听到 mounted 钩子函数 ...&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  Child.vue</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件触发 mounted 钩子函数 ...&#x27;</span>);</span><br><span class="line">&#125;,    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 以上输出顺序为：</span></span><br><span class="line"><span class="comment">// 子组件触发 mounted 钩子函数 ...</span></span><br><span class="line"><span class="comment">// 父组件监听到 mounted 钩子函数 ...     </span></span><br></pre></td></tr></table></figure>

<p>当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p>
<h2 id="12、谈谈你对-keep-alive-的了解？"><a href="#12、谈谈你对-keep-alive-的了解？" class="headerlink" title="12、谈谈你对 keep-alive 的了解？"></a>12、谈谈你对 keep-alive 的了解？</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p>
<ul>
<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>
<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li>
<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>
</ul>
<h2 id="13、组件中-data-为什么是一个函数？"><a href="#13、组件中-data-为什么是一个函数？" class="headerlink" title="13、组件中 data 为什么是一个函数？"></a>13、组件中 data 为什么是一个函数？</h2><blockquote>
<p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">	<span class="attr">message</span>: <span class="string">&quot;子组件&quot;</span>,</span><br><span class="line">	<span class="attr">childName</span>:<span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Vue</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</p>
<h2 id="14、v-model-的原理？"><a href="#14、v-model-的原理？" class="headerlink" title="14、v-model 的原理？"></a>14、v-model 的原理？</h2><p>我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
<p>以 input  表单元素为例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">v-model</span>=<span class="string">&#x27;something&#x27;</span>&gt;</span><br><span class="line">    </span><br><span class="line">相当于</span><br><span class="line"></span><br><span class="line">&lt;input v-bind:<span class="attribute">value</span>=<span class="string">&quot;something&quot;</span> v-on:<span class="attribute">input</span>=<span class="string">&quot;something = <span class="variable">$event</span>.target.value&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">父组件：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ModelChild</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ModelChild</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">子组件：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;value&#125;</span><span class="language-xml">&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">props:</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    value: String</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">methods: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  test1()&#123;</span></span><br><span class="line"><span class="template-variable">     this.$emit(&#x27;input&#x27;, &#x27;小红&#x27;)</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">&#125;,</span></span><br></pre></td></tr></table></figure>



<h2 id="15、Vue-组件间通信有哪几种方式？"><a href="#15、Vue-组件间通信有哪几种方式？" class="headerlink" title="15、Vue 组件间通信有哪几种方式？"></a>15、Vue 组件间通信有哪几种方式？</h2><p>Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。</p>
<p><strong>（1）<code>props / $emit</code>  适用 父子组件通信</strong></p>
<p>这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。</p>
<p><strong>（2）<code>ref</code> 与 <code>$parent / $children</code> 适用 父子组件通信</strong></p>
<ul>
<li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>
<li><code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>
</ul>
<p><strong>（3）<code>EventBus （$emit / $on）</code>  适用于 父子、隔代、兄弟组件通信</strong></p>
<p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</p>
<p><strong>（4）<code>$attrs</code>/<code>$listeners</code> 适用于 隔代组件通信</strong></p>
<ul>
<li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。通常配合 inheritAttrs 选项一起使用。</li>
<li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的)  v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</li>
</ul>
<p><strong>（5）<code>provide / inject</code> 适用于 隔代组件通信</strong></p>
<p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p>
<p><strong>（6）Vuex  适用于 父子、隔代、兄弟组件通信</strong></p>
<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>
<ul>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>改变 store 中的状态的唯一途径就是显式地提交  (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</li>
</ul>
<h2 id="16、你使用过-Vuex-吗？"><a href="#16、你使用过-Vuex-吗？" class="headerlink" title="16、你使用过 Vuex 吗？"></a>16、你使用过 Vuex 吗？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>
<p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>
<p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>
<p>主要包括以下几个模块：</p>
<ul>
<li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li>
<li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li>
<li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li>
<li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li>
<li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li>
</ul>
<h2 id="17、使用过-Vue-SSR-吗？说说-SSR？"><a href="#17、使用过-Vue-SSR-吗？说说-SSR？" class="headerlink" title="17、使用过 Vue SSR 吗？说说 SSR？"></a>17、使用过 Vue SSR 吗？说说 SSR？</h2><blockquote>
<p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p>
<p>即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。</p>
</blockquote>
<p><strong>服务端渲染 SSR 的优缺点如下：</strong></p>
<p><strong>（1）服务端渲染的优点：</strong></p>
<ul>
<li>更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</li>
<li>更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li>
</ul>
<p><strong>（2) 服务端渲染的缺点：</strong></p>
<ul>
<li>更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</li>
<li>更多的服务器负载：在 Node.js  中渲染完整的应用程序，显然会比仅仅提供静态文件的  server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>
</ul>
<p>如果没有 SSR 开发经验的同学，可以参考本文作者的另一篇 SSR 的实践文章<a href="https://juejin.cn/post/6844903824956588040">《Vue SSR 踩坑之旅》</a>，里面 SSR 项目搭建以及附有项目源码。</p>
<h2 id="18、vue-router-路由模式有几种？"><a href="#18、vue-router-路由模式有几种？" class="headerlink" title="18、vue-router 路由模式有几种？"></a>18、vue-router 路由模式有几种？</h2><p>vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;history&#x27;</span>:</span><br><span class="line">	<span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.<span class="keyword">base</span>)</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;hash&#x27;</span>:</span><br><span class="line">	<span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.<span class="keyword">base</span>, <span class="keyword">this</span>.fallback)</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;abstract&#x27;</span>:</span><br><span class="line">	<span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.<span class="keyword">base</span>)</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">	  <span class="keyword">assert</span>(<span class="keyword">false</span>, `invalid mode: $&#123;mode&#125;`)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，3 种路由模式的说明如下：</p>
<ul>
<li>hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；</li>
<li>history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；</li>
<li>abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>
</ul>
<h2 id="19、能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？"><a href="#19、能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？" class="headerlink" title="19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？"></a>19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2><p><strong>（1）hash 模式的实现原理</strong></p>
<p>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">https</span>://www.<span class="built_in">word</span>.com<span class="comment">#search</span></span><br></pre></td></tr></table></figure>

<p>hash  路由模式的实现主要是基于下面几个特性：</p>
<ul>
<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>
<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</li>
<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>
<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li>
</ul>
<p><strong>（2）history 模式的实现原理</strong></p>
<p>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">window</span>.history.pushState(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="type">path</span>);</span><br><span class="line"><span class="keyword">window</span>.history.replaceState(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="type">path</span>);</span><br></pre></td></tr></table></figure>

<p>history 路由模式的实现主要基于存在下面几个特性：</p>
<ul>
<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>
<li>我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>
<li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>
</ul>
<h2 id="20、什么是-MVVM？"><a href="#20、什么是-MVVM？" class="headerlink" title="20、什么是 MVVM？"></a>20、什么是 MVVM？</h2><p>Model–View–ViewModel （MVVM） 是一个软件架构设计模式，由微软 WPF 和 Silverlight 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于2005年在他的博客上发表</p>
<p>MVVM 源自于经典的 Model–View–Controller（MVC）模式  ，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大地提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。如下图所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca75871ec53fba~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<p>（1）View 层</p>
<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建 。</p>
<p>（2）Model 层</p>
<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。</p>
<p>（3）ViewModel 层</p>
<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。</p>
<p>MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</p>
<p>我们以下通过一个 Vue 实例来说明 MVVM 的具体实现，有 Vue 开发经验的同学应该一目了然：</p>
<p>（1）View 层</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showMessage()&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（2）ViewModel 层</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;  <span class="comment">// 用于描述视图状态   </span></span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>, </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;  <span class="comment">// 用于描述视图行为  </span></span><br><span class="line">        <span class="title function_">showMessage</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="title function_">alert</span>(vm.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">// Ajax 获取 Model 层的数据</span></span><br><span class="line">        <span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/your/server/data/api&#x27;</span>,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                vm.<span class="property">message</span> = res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>（3） Model 层</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/your/server/data/api&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;res&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IoveC&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www.cnblogs.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="21、Vue-是如何实现数据双向绑定的？"><a href="#21、Vue-是如何实现数据双向绑定的？" class="headerlink" title="21、Vue 是如何实现数据双向绑定的？"></a>21、Vue 是如何实现数据双向绑定的？</h2><p>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据，如下图所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca75871f2e5f80~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<p>即：</p>
<ul>
<li>输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。</li>
<li>Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化。</li>
</ul>
<p>其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。</p>
<p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p>
<p>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</p>
<p>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</p>
<p>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。</p>
<p>实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</p>
<p>以上四个步骤的流程图表示如下，如果有同学理解不大清晰的，可以查看作者专门介绍数据双向绑定的文章<a href="https://juejin.cn/post/6844903903822086151">《0 到 1 掌握：Vue 核心之数据双向绑定》</a>，有进行详细的讲解、以及代码 demo 示例。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca75871f729d89~tplv-t2oaga2asx-watermark.awebp" alt="1.png"></p>
<h2 id="22、Vue-框架怎么实现对象和数组的监听？"><a href="#22、Vue-框架怎么实现对象和数组的监听？" class="headerlink" title="22、Vue 框架怎么实现对象和数组的监听？"></a>22、Vue 框架怎么实现对象和数组的监听？</h2><p>如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是  Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Observe a list of Array items.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">observeArray <span class="comment">(items: Array&lt;any&gt;)</span> &#123;</span><br><span class="line">  for <span class="comment">(let i = 0, l = items.length; i &lt; l; i++)</span> &#123;</span><br><span class="line">    observe<span class="comment">(items[i])</span>  <span class="comment">// observe 功能为监测数据的变化</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对属性进行递归遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">let childOb = !shallow &amp;&amp; observe<span class="comment">(val)</span> <span class="comment">// observe 功能为监测数据的变化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用  Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p>
<h2 id="23、Proxy-与-Object-defineProperty-优劣对比"><a href="#23、Proxy-与-Object-defineProperty-优劣对比" class="headerlink" title="23、Proxy 与 Object.defineProperty 优劣对比"></a>23、Proxy 与 Object.defineProperty 优劣对比</h2><p><strong>Proxy 的优势如下:</strong></p>
<ul>
<li>Proxy 可以直接监听对象而非属性；</li>
<li>Proxy 可以直接监听数组的变化；</li>
<li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>
<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li>
<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>
</ul>
<p><strong>Object.defineProperty 的优势如下:</strong></p>
<ul>
<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>
</ul>
<h2 id="24、Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？"><a href="#24、Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？" class="headerlink" title="24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？"></a>24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h2><p>受现代 JavaScript 的限制 ，Vue <strong>无法检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 <code>Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)</code>  来实现为对象添加响应式属性，那框架本身是如何实现的呢？</p>
<p>我们查看对应的 Vue 源码：<code>vue/src/core/instance/index.js</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">export function <span class="keyword">set</span> (target: Array&lt;any&gt; | Object, key: any, <span class="keyword">val</span>: any): any &#123;</span><br><span class="line">  <span class="comment">// target 为数组  </span></span><br><span class="line">  <span class="keyword">if</span> (Array.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    <span class="comment">// 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误</span></span><br><span class="line">    target.length = Math.max(target.length, key)</span><br><span class="line">    <span class="comment">// 利用数组的splice变异方法触发响应式  </span></span><br><span class="line">    target.splice(key, <span class="number">1</span>, <span class="keyword">val</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">val</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// key 已经存在，直接修改属性值  </span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> Object.prototype)) &#123;</span><br><span class="line">    target[key] = <span class="keyword">val</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">val</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="comment">// target 本身就不是响应式数据, 直接赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = <span class="keyword">val</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">val</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对属性进行响应式处理</span></span><br><span class="line">  defineReactive(ob.value, key, <span class="keyword">val</span>)</span><br><span class="line">  ob.dep.notify()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">val</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们阅读以上源码可知，vm.$set 的实现原理是：</p>
<ul>
<li>如果目标是数组，直接使用数组的 splice 方法触发相应式；</li>
<li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用   defineReactive 方法进行响应式处理（ defineReactive 方法就是  Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li>
</ul>
<h2 id="25、虚拟-DOM-的优缺点？"><a href="#25、虚拟-DOM-的优缺点？" class="headerlink" title="25、虚拟 DOM 的优缺点？"></a>25、虚拟 DOM 的优缺点？</h2><p><strong>优点：</strong></p>
<ul>
<li><strong>保证性能下限：</strong> 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li>
<li><strong>无需手动操作 DOM：</strong> 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>
<li><strong>跨平台：</strong> 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li><strong>无法进行极致优化：</strong> 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>
</ul>
<h2 id="26、虚拟-DOM-实现原理？"><a href="#26、虚拟-DOM-实现原理？" class="headerlink" title="26、虚拟 DOM 实现原理？"></a>26、虚拟 DOM 实现原理？</h2><p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p>
<ul>
<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>
<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>
<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li>
</ul>
<p>如果对以上 3 个部分还不是很了解的同学，可以查看本文作者写的另一篇详解虚拟 DOM 的文章《<a href="https://juejin.cn/post/6844903895467032589#heading-14">深入剖析：Vue核心之虚拟DOM</a>》</p>
<h2 id="27、Vue-中的-key-有什么作用？"><a href="#27、Vue-中的-key-有什么作用？" class="headerlink" title="27、Vue 中的 key 有什么作用？"></a>27、Vue 中的 key 有什么作用？</h2><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和  oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。具体有无 key 的 diff 过程，可以查看作者写的另一篇详解虚拟 DOM 的文章《<a href="https://juejin.cn/post/6844903895467032589#heading-14">深入剖析：Vue核心之虚拟DOM</a>》</p>
<p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>
<p><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数 <code>a.key === b.key</code> 对比中可以避免就地复用的情况。所以会更加准确。</p>
<p><strong>更快速</strong>：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> createKeyToOldIdx (children, beginIdx, endIdx) &#123;</span><br><span class="line">  <span class="keyword">let</span> i,<span class="built_in"> key</span></span><br><span class="line">  const <span class="keyword">map</span> = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class="line">   <span class="built_in"> key</span> = children[i]<span class="built_in">.key</span></span><br><span class="line">    <span class="keyword">if</span> (isDef<span class="built_in">(key</span>)) <span class="keyword">map</span><span class="built_in">[key</span>] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28、你有对-Vue-项目进行哪些优化？"><a href="#28、你有对-Vue-项目进行哪些优化？" class="headerlink" title="28、你有对 Vue 项目进行哪些优化？"></a>28、你有对 Vue 项目进行哪些优化？</h2><p><strong>（1）代码层面的优化</strong></p>
<ul>
<li>v-if 和 v-show 区分使用场景</li>
<li>computed 和 watch  区分使用场景</li>
<li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li>
<li>长列表性能优化</li>
<li>事件的销毁</li>
<li>图片资源懒加载</li>
<li>路由懒加载</li>
<li>第三方插件的按需引入</li>
<li>优化无限列表性能</li>
<li>服务端渲染 SSR or 预渲染</li>
</ul>
<p><strong>（2）Webpack 层面的优化</strong></p>
<ul>
<li>Webpack 对图片进行压缩</li>
<li>减少 ES6 转为 ES5 的冗余代码</li>
<li>提取公共代码</li>
<li>模板预编译</li>
<li>提取组件的 CSS</li>
<li>优化 SourceMap</li>
<li>构建结果输出分析</li>
<li>Vue 项目的编译优化</li>
</ul>
<p><strong>（3）基础的 Web 技术的优化</strong></p>
<ul>
<li>开启 gzip 压缩</li>
<li>浏览器缓存</li>
<li>CDN 的使用</li>
<li>使用 Chrome Performance 查找性能瓶颈</li>
</ul>
<h2 id="29、对于-vue3-0-特性你有什么了解的吗？"><a href="#29、对于-vue3-0-特性你有什么了解的吗？" class="headerlink" title="29、对于 vue3.0 特性你有什么了解的吗？"></a>29、对于 vue3.0 特性你有什么了解的吗？</h2><p>Vue 3.0 正走在发布的路上，Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：</p>
<p><strong>（1）监测机制的改变</strong></p>
<p>3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</p>
<ul>
<li>只能监测属性，不能监测对象</li>
<li>检测属性的添加和删除；</li>
<li>检测数组索引和长度的变更；</li>
<li>支持 Map、Set、WeakMap 和 WeakSet。</li>
</ul>
<p>新的 observer 还提供了以下特性：</p>
<ul>
<li>用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。</li>
<li>默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。</li>
<li>更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。</li>
<li>不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。</li>
<li>更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。</li>
</ul>
<p><strong>（2）模板</strong></p>
<p>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</p>
<p>同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</p>
<p><strong>（3）对象式的组件声明方式</strong></p>
<p>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。</p>
<p>此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。</p>
<p><strong>（4）其它方面的更改</strong></p>
<p>vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：</p>
<ul>
<li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li>
<li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li>
<li>基于 treeshaking 优化，提供了更多的内置功能。</li>
</ul>
<h2 id="30-vue两种路由有什么区别？"><a href="#30-vue两种路由有什么区别？" class="headerlink" title="30.vue两种路由有什么区别？"></a>30.vue两种路由有什么区别？</h2><p>使用<code>Vue</code>+<code>vue-router</code>创建单页应用十分简单, <code>vue-router</code>提供的功能是将组件映射到路由, 然后渲染出来. 所以<code>vue-router</code>需要满足两个需求</p>
<ol>
<li>记录当前页面的状态</li>
<li>可以使用浏览器的前进后退功能</li>
</ol>
<p>而<code>vue-router</code>为了满足以上两个需求实现以下三个功能</p>
<ol>
<li>改变URL且不让浏览器向服务器发出请求</li>
<li>检测URL的改变</li>
<li>截获URL地址, 并解析出需要的信息来匹配路由规则</li>
</ol>
<h3 id="hash模式的特点"><a href="#hash模式的特点" class="headerlink" title="hash模式的特点"></a>hash模式的特点</h3><p>hash表示的是地址栏URL中#符号(也称作为锚点), hash虽然会出现在URL中, 但是不会被包含在Http请求中, 因此hash值改变不会重新加载页面.</p>
<p>由于hash值变化不会引起浏览器向服务器发出请求, 而且hash改变会触发hashchange事件, 浏览器的进后退也能对其进行控制, 所以在HTML5之前, 基本都是使用hash来实现前端路由.</p>
<h3 id="history模式的特点"><a href="#history模式的特点" class="headerlink" title="history模式的特点"></a>history模式的特点</h3><p>利用了HTML5新增的<code>pushState()</code>和<code>replaceState()</code>两个api, 通过这两个api完成URL跳转不会重新加载页面</p>
<p>同时history模式解决了hash模式存在的问题. hash的传参是基于URL的, 如果要传递复杂的数据, 会有体积限制, 而history模式不仅可以在URL里传参, 也可以将数据存放到一个特定的对象中</p>
<h3 id="vue-router实现"><a href="#vue-router实现" class="headerlink" title="vue-router实现"></a>vue-router实现</h3><p>hash模式和history模式实现vue-router跳转api的区别</p>
<table>
<thead>
<tr>
<th>api</th>
<th>hash</th>
<th>history</th>
</tr>
</thead>
<tbody><tr>
<td>push</td>
<td>window.location.assign</td>
<td>window.history.pushState</td>
</tr>
<tr>
<td>replace</td>
<td>window.location.replace</td>
<td>window.history.replaceState</td>
</tr>
<tr>
<td>go</td>
<td>window.history.go</td>
<td>window.history.go</td>
</tr>
<tr>
<td>back</td>
<td>window.history.go(-1)</td>
<td>window.history.go(-1)</td>
</tr>
<tr>
<td>forward</td>
<td>window.history.go(1)</td>
<td>window.history.go(1)</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/%E5%89%8D%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-常见的浏览器内核有哪些"><a href="#1-常见的浏览器内核有哪些" class="headerlink" title="1. 常见的浏览器内核有哪些?"></a>1. 常见的浏览器内核有哪些?</h2><table>
<thead>
<tr>
<th>浏览器 / RunTime</th>
<th>内核（渲染引擎）</th>
<th>JavaScript 引擎</th>
</tr>
</thead>
<tbody><tr>
<td>Chrome</td>
<td>webkit-&gt;blink</td>
<td>V8</td>
</tr>
<tr>
<td>FireFox</td>
<td>Gecko</td>
<td>SpiderMonkey</td>
</tr>
<tr>
<td>Safari</td>
<td>Webkit</td>
<td>JavaScriptCore</td>
</tr>
<tr>
<td>Edge</td>
<td>EdgeHTML</td>
<td>Chakra(for JavaScript)</td>
</tr>
<tr>
<td>IE</td>
<td>Trident</td>
<td>JScript（IE3.0-IE8.0）</td>
</tr>
<tr>
<td>Opera</td>
<td>Presto-&gt;blink</td>
<td>Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）</td>
</tr>
<tr>
<td>Node.js</td>
<td>-</td>
<td>V8</td>
</tr>
</tbody></table>
<h2 id="2-浏览器的主要组成部分是什么？"><a href="#2-浏览器的主要组成部分是什么？" class="headerlink" title="2. 浏览器的主要组成部分是什么？"></a>2. 浏览器的主要组成部分是什么？</h2><ol>
<li><strong>「用户界面」</strong> - 包括地址栏、前进/后退按钮、书签菜单等。</li>
<li><strong>「浏览器引擎」</strong> - 在用户界面和呈现引擎之间传送指令。</li>
<li><strong>「呈现引擎」</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>
<li><strong>「网络」</strong> - 用于网络调用，比如 HTTP 请求。</li>
<li><strong>「用户界面后端」</strong> -用于绘制基本的窗口小部件，比如组合框和窗口。</li>
<li><strong>「JavaScript 解释器」</strong>- 用于解析和执行 JavaScript 代码。</li>
<li><strong>「数据存储」</strong> - 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。</li>
</ol>
<p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p>
<h2 id="3-强缓存"><a href="#3-强缓存" class="headerlink" title="3. 强缓存"></a>3. 强缓存</h2><p>强缓存是当我们访问URL的时候，不会向服务器发送请求，直接从缓存中读取资源，但是会返回200的状态码。</p>
<p><strong>如何设置强缓存？</strong></p>
<p>我们第一次进入页面，请求服务器，然后服务器进行应答，浏览器会根据response Header来判断是否对资源进行缓存，如果响应头中expires、pragma或者cache-control字段，代表这是强缓存，浏览器就会把资源缓存在memory cache 或 disk cache中。</p>
<p>第二次请求时，浏览器判断请求参数，如果符合强缓存条件就直接返回状态码200，从本地缓存中拿数据。否则把响应参数存在request header请求头中，看是否符合协商缓存，符合则返回状态码304，不符合则服务器会返回全新资源。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca00bff3081e4cfd993a8f252f4fa23a~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h3><p>是HTTP1.0控制网页缓存的字段，值为一个时间戳，准确来讲是格林尼治时间，服务器返回该请求结果缓存的到期时间，意思是，再次发送请求时，如果未超过过期时间，直接使用该缓存，如果过期了则重新请求。</p>
<p>有个缺点，就是它判断是否过期是用本地时间来判断的，本地时间是可以自己修改的。</p>
<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>是HTTP1.1中控制网页缓存的字段，当Cache-Control都存在时，Cache-Control优先级更高，主要取值为：</p>
<p>public：资源客户端和服务器都可以缓存。</p>
<p>privite：资源只有客户端可以缓存。</p>
<p>no-cache：客户端缓存资源，但是是否缓存需要经过协商缓存来验证。</p>
<p>no-store：不使用缓存。</p>
<p>max-age：缓存保质期。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f169e913e244d52a44ff1e4185cb9ce~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>Cache-Control使用了max-age相对时间，解决了expires的问题。</p>
<h3 id="pragma"><a href="#pragma" class="headerlink" title="pragma"></a>pragma</h3><p>这个是HTTP1.0中禁用网页缓存的字段，其取值为no-cache，和Cache-Control的no-cache效果一样。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c82d0049c3f4f57bf66d8effcb25ed5~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h2 id="4-缓存位置"><a href="#4-缓存位置" class="headerlink" title="4. 缓存位置"></a>4. 缓存位置</h2><p>上面我们说，强缓存我们会把资源房放到memory cache 和 disk cache中，那什么资源放在memory cache，什么资源放在disk cache中？</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c6020dcbb114111a8e0a09f52d39ab7~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>存存储图像和网页等资源主要缓存在disk cache，操作系统缓存文件等资源大部分都会缓存在memory cache中。具体操作浏览器自动分配，看谁的资源利用率不高就分给谁。</p>
<p>可以看到memory cache请求时间都是0ms，这个是不是太神奇了，这方面我来梳理下。</p>
<p>查找浏览器缓存时会按顺序查找: Service Worker–&gt;Memory Cache–&gt;Disk Cache–&gt;Push Cache。</p>
<h3 id="1-Service-Worker"><a href="#1-Service-Worker" class="headerlink" title="1. Service Worker"></a>1. Service Worker</h3><p>是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</p>
<h3 id="2-Memory-Cache"><a href="#2-Memory-Cache" class="headerlink" title="2. Memory Cache"></a>2. Memory Cache</h3><p>内存中的缓存，主要包含的是当前中页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p>
<h3 id="3-Disk-Cache"><a href="#3-Disk-Cache" class="headerlink" title="3. Disk Cache"></a>3. Disk Cache</h3><p>存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</p>
<p>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache。</p>
<p>memory cache 要比 disk cache 快的多。举个例子：从远程 web 服务器直接提取访问文件可能需要500毫秒(半秒)，那么磁盘访问可能需要10-20毫秒，而内存访问只需要100纳秒，更高级的还有 L1缓存访问(最快和最小的 CPU 缓存)只需要0.5纳秒。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6216b57ad4cb480884c2b69d0f0ffe26~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>很神奇的，我们又看到了一个prefetch cache，这个又是什么呢?</p>
<p><strong>prefetch cache(预取缓存)</strong></p>
<p>link标签上带了prefetch，再次加载会出现。</p>
<p>prefetch是预加载的一种方式，被标记为prefetch的资源，将会被浏览器在空闲时间加载。</p>
<h3 id="4-Push-Cache"><a href="#4-Push-Cache" class="headerlink" title="4. Push Cache"></a>4. Push Cache</h3><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p>
<h3 id="5-CPU、内存、硬盘"><a href="#5-CPU、内存、硬盘" class="headerlink" title="5. CPU、内存、硬盘"></a>5. CPU、内存、硬盘</h3><p>这里提到了硬盘，内存，可能有些小伙伴对硬盘，内存没什么直观的概念。</p>
<p>CPU、内存、硬盘都是计算机的主要组成部分。</p>
<p>CPU：中央处理单元(CntralPocessingUit)的缩写，也叫处理器，是计算机的运算核心和控制核心。电脑靠CPU来运算、控制。让电脑的各个部件顺利工作，起到协调和控制作用。</p>
<p>硬盘：存储资料和软件等数据的设备，有容量大，断电数据不丢失的特点。</p>
<p>内存：负责硬盘等硬件上的数据与CPU之间数据交换处理。特点是体积小，速度快，有电可存，无电清空，即电脑在开机状态时内存中可存储数据，关机后将自动清空其中的所有数据。</p>
<h2 id="5-协商缓存"><a href="#5-协商缓存" class="headerlink" title="5. 协商缓存"></a>5. 协商缓存</h2><p>协商缓存就是强缓存失效后，浏览器携带缓存标识向服务器发送请求，由服务器根据缓存标识来决定是否使用缓存的过程。</p>
<p>主要有以下两种情况：</p>
<p>协商缓存生效，返回304</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f26ab979fcd4df6906a2e9d5e28f56a~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>协商缓存失效，返回200和请求结果</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/449a56554c1e4f0c949e139081a9db4c~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p><strong>如何设置协商缓存？</strong></p>
<h5 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a>Last-Modified / If-Modified-Since</h5><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6c3aabbfd9a43ab81c97dd519da3b9f~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa2eae3bc57d48e39a871c8e659bf97d~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h5 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a>Etag / If-None-Match</h5><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0da637ef7fa64aef8b1f932c3dd0297b~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e9d32690cdf45b498e5dcabd4c12f71~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<blockquote>
<p>Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。</p>
<h4 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h4><ul>
<li><p>性能上，<code>Last-Modified</code>优于<code>ETag</code>，<code>Last-Modified</code>记录的是时间点，而<code>Etag</code>需要根据文件的MD5算法生成对应的hash值。</p>
</li>
<li><p>精度上，</p>
</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ETag</span></span><br></pre></td></tr></table></figure>

<p>优于</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Last-Modified</span></span><br></pre></td></tr></table></figure>

<p>。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ETag</span></span><br></pre></td></tr></table></figure>

<p>按照内容给资源带上标识，能准确感知资源变化，</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Last-Modified</span></span><br></pre></td></tr></table></figure>

<p>在某些场景并不能准确感知变化，比如👇 </p>
<ul>
<li>编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。</li>
<li>Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。</li>
</ul>
<p>最后，<strong>「如果两种方式都支持的话，服务器会优先考虑<code>ETag</code>」</strong>。</p>
</blockquote>
<p>目前的项目大多使用这种缓存方案的：</p>
<ul>
<li>HTML: 协商缓存；</li>
<li>css、js、图片：强缓存，文件名带上hash。</li>
</ul>
<h2 id="7-强缓存与协商缓存的区别"><a href="#7-强缓存与协商缓存的区别" class="headerlink" title="7. 强缓存与协商缓存的区别"></a>7. 强缓存与协商缓存的区别</h2><ol>
<li><p>强缓存不发请求到服务器，所以有时候资源更新了浏览器还不知道，但是协商缓存会发请求到服务器，所以资源是否更新，服务器肯定知道。</p>
</li>
<li><p>大部分web服务器都默认开启协商缓存。</p>
</li>
</ol>
<h2 id="8-刷新对于强缓存和协商缓存的影响"><a href="#8-刷新对于强缓存和协商缓存的影响" class="headerlink" title="8. 刷新对于强缓存和协商缓存的影响"></a>8. 刷新对于强缓存和协商缓存的影响</h2><ol>
<li><p>当ctrl+f5强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存。</p>
</li>
<li><p>当f5刷新网页时，跳过强缓存，但是会检查协商缓存。</p>
</li>
<li><p>浏览器地址栏中写入URL，回车 浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）</p>
</li>
</ol>
<h2 id="9-什么是浏览器同源策略？"><a href="#9-什么是浏览器同源策略？" class="headerlink" title="9.什么是浏览器同源策略？"></a>9.什么是浏览器同源策略？</h2><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>
<p>下表给出了相对<a href="http://store.company.com/dir/page.html同源检测的示例">http://store.company.com/dir/page.html同源检测的示例</a>:</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/24/16d610123996dc1e~tplv-t2oaga2asx-watermark.awebp" alt="2019-06-23-10-25-28"></p>
<p>浏览器中的大部分内容都是受同源策略限制的，但是以下三个标签可以不受限制：</p>
<ul>
<li>img</li>
<li>link</li>
<li>script</li>
</ul>
<h2 id="10-如何实现跨域？"><a href="#10-如何实现跨域？" class="headerlink" title="10.如何实现跨域？"></a>10.如何实现跨域？</h2><h3 id="最经典的跨域方案jsonp"><a href="#最经典的跨域方案jsonp" class="headerlink" title="最经典的跨域方案jsonp"></a>最经典的跨域方案jsonp</h3><p>jsonp本质上是一个Hack，它利用``标签不受同源策略限制的特性进行跨域操作。</p>
<p>jsonp优点：</p>
<ul>
<li>实现简单</li>
<li>兼容性非常好</li>
</ul>
<p>jsonp的缺点：</p>
<ul>
<li>只支持get请求（因为``标签只能get）</li>
<li>有安全性问题，容易遭受xss攻击</li>
<li>需要服务端配合jsonp进行一定程度的改造</li>
</ul>
<p>jsonp的实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">JSONP</span>(<span class="params">&#123;  </span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  params,</span></span><br><span class="line"><span class="params">  callbackKey,</span></span><br><span class="line"><span class="params">  callback</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 在参数里制定 callback 的名字</span></span><br><span class="line">  params = params || &#123;&#125;</span><br><span class="line">  params[callbackKey] = <span class="string">&#x27;jsonpCallback&#x27;</span></span><br><span class="line">    <span class="comment">// 预留 callback</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">jsonpCallback</span> = callback</span><br><span class="line">    <span class="comment">// 拼接参数字符串</span></span><br><span class="line">  <span class="keyword">const</span> paramKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(params)</span><br><span class="line">  <span class="keyword">const</span> paramString = paramKeys</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 插入 DOM 元素</span></span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;paramString&#125;</span>`</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>P(&#123;  </span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://s.weibo.com/ajax/jsonp/suggestion&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">callbackKey</span>: <span class="string">&#x27;_cb&#x27;</span>,</span><br><span class="line">  <span class="title function_">callback</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="最流行的跨域方案cors"><a href="#最流行的跨域方案cors" class="headerlink" title="最流行的跨域方案cors"></a>最流行的跨域方案cors</h3><p>cors是目前主流的跨域解决方案，跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p>
<p>如果你用express，可以这样在后端设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CORS middleware</span></span><br><span class="line"><span class="keyword">var</span> allowCrossDomain = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://example.com&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET,PUT,POST,DELETE&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.<span class="title function_">configure</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(express.<span class="title function_">bodyParser</span>());</span><br><span class="line">    app.<span class="title function_">use</span>(express.<span class="title function_">cookieParser</span>());</span><br><span class="line">    app.<span class="title function_">use</span>(express.<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&#x27;cool beans&#x27;</span> &#125;));</span><br><span class="line">    app.<span class="title function_">use</span>(express.<span class="title function_">methodOverride</span>());</span><br><span class="line">    app.<span class="title function_">use</span>(allowCrossDomain);</span><br><span class="line">    app.<span class="title function_">use</span>(app.<span class="property">router</span>);</span><br><span class="line">    app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>在生产环境中建议用成熟的开源中间件解决问题。</p>
<h3 id="最方便的跨域方案Nginx"><a href="#最方便的跨域方案Nginx" class="headerlink" title="最方便的跨域方案Nginx"></a>最方便的跨域方案Nginx</h3><p>nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。</p>
<p>现在的新项目中nginx几乎是首选，我们用node或者java开发的服务通常都需要经过nginx的反向代理。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/24/16d610123c354a18~tplv-t2oaga2asx-watermark.awebp" alt="2019-06-24-10-19-34"></p>
<p>反向代理的原理很简单，即所有客户端的请求都必须先经过nginx的处理，nginx作为代理服务器再讲请求转发给node或者java服务，这样就规避了同源策略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#进程, 可更具cpu数量调整</span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    #连接数</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.<span class="property">types</span>;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接超时时间，服务器会在这个时间过后关闭连接。</span></span><br><span class="line">    keepalive_timeout  <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gizp压缩</span></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接请求nginx也是会报跨域错误的这里设置允许跨域</span></span><br><span class="line">    <span class="comment">// 如果代理地址已经允许跨域则不需要这些, 否则报错(虽然这样nginx跨域就没意义了)</span></span><br><span class="line">    add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> *;</span><br><span class="line">    add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Headers</span> X-<span class="title class_">Requested</span>-<span class="title class_">With</span>;</span><br><span class="line">    add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Methods</span> <span class="variable constant_">GET</span>,<span class="variable constant_">POST</span>,<span class="variable constant_">OPTIONS</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根路径指到index.html</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// localhost/api 的请求会被转发到192.168.0.103:8080</span></span><br><span class="line">        location /api &#123;</span><br><span class="line">            rewrite ^<span class="regexp">/b/</span>(.*)$ /$1 <span class="keyword">break</span>; <span class="comment">// 去除本地接口/api前缀, 否则会出现404</span></span><br><span class="line">            proxy_set_header <span class="title class_">Host</span> $host;</span><br><span class="line">            proxy_set_header X-<span class="title class_">Real</span>-<span class="variable constant_">IP</span> $remote_addr;</span><br><span class="line">            proxy_set_header X-<span class="title class_">Forwarded</span>-<span class="title class_">For</span> $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass <span class="attr">http</span>:<span class="comment">//192.168.0.103:8080; # 转发地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重定向错误页面到/50x.html</span></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.<span class="property">html</span>;</span><br><span class="line">        location = /50x.<span class="property">html</span> &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="其它跨域方案"><a href="#其它跨域方案" class="headerlink" title="其它跨域方案"></a>其它跨域方案</h3><ol>
<li>HTML5 XMLHttpRequest 有一个API，postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</li>
<li>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了，因此可以跨域。</li>
<li>window.name + iframe：window.name属性值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值，我们可以利用这个特点进行跨域。</li>
<li>location.hash + iframe：a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</li>
<li>document.domain + iframe： 该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式，我们只需要给页面添加 document.domain =’test.com’ 表示二级域名都相同就可以实现跨域，两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1、预编译理解"><a href="#1、预编译理解" class="headerlink" title="1、预编译理解"></a>1、预编译理解</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, c</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 打印结果：function a()&#123;&#125;                        </span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 打印结果：123 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 打印结果：function c()&#123;&#125;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="number">666</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 打印结果：undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 打印结果：undefined</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 打印结果：function ()&#123;&#125;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 打印结果：function c ()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">AO</span>:&#123;	</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>  <span class="number">1</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="attr">c</span>: <span class="literal">undefined</span>  <span class="number">2</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="attr">d</span>: <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>预编译</p>
<p>js的变量对象 AO对象，提供js引擎自己去访问</p>
<p>四个步骤：</p>
<p>1.创建AO对象</p>
<p>2.找形参和变量声明作为AO对象的属性名，值为undefined</p>
<p>3.实参和形参相统一</p>
<p>4.找函数声明，会覆盖变量声明</p>
<h2 id="2、浏览器渲染页面过程"><a href="#2、浏览器渲染页面过程" class="headerlink" title="2、浏览器渲染页面过程"></a>2、浏览器渲染页面过程</h2><p>用户输入URL地址</p>
<p>浏览器解析URL解析出主机名</p>
<p>浏览器将主机名转换成服务器ip地址（浏览器先查找本地DNS缓存列表 没有的话 再向浏览器默认的DNS服务器发送查询请求 同时缓存）</p>
<p>浏览器将端口号从URL中解析出来</p>
<p>浏览器建立一条与目标Web服务器的TCP连接（三次握手）</p>
<p>浏览器向服务器发送一条HTTP请求报文</p>
<p>服务器向浏览器返回一条HTTP响应报文</p>
<p>关闭连接 浏览器解析文档</p>
<h2 id="3-异步编程的方法"><a href="#3-异步编程的方法" class="headerlink" title="3.异步编程的方法"></a>3.异步编程的方法</h2><h2 id="4-解释同步-异步、阻塞-非阻塞、并行-并发之间的区别"><a href="#4-解释同步-异步、阻塞-非阻塞、并行-并发之间的区别" class="headerlink" title="4.解释同步\异步、阻塞\非阻塞、并行\并发之间的区别"></a>4.<strong>解释同步\异步、阻塞\非阻塞、并行\并发之间的区别</strong></h2><h2 id="5-js实现数值千分位"><a href="#5-js实现数值千分位" class="headerlink" title="5. js实现数值千分位"></a>5. <strong>js实现数值千分位</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">number.<span class="title function_">toLocaleString</span>()</span><br></pre></td></tr></table></figure>

<h2 id="6-为什么JavaScript是单线程的，与异步冲突吗"><a href="#6-为什么JavaScript是单线程的，与异步冲突吗" class="headerlink" title="6. 为什么JavaScript是单线程的，与异步冲突吗"></a>6. 为什么JavaScript是单线程的，与异步冲突吗</h2><p>补充：JS中其实是没有线程概念的，所谓的单线程也只是相对于多线程而言。JS的设计初衷就没有考虑这些，针对JS这种不具备并行任务处理的特性，我们称之为“单线程”。</p>
<p>JS的单线程是指一个浏览器进程中只有一个JS的执行线程，同一时刻内只会有一段代码在执行。</p>
<p>举个通俗例子，假设JS支持多线程操作的话，JS可以操作DOM，那么一个线程在删除DOM，另外一个线程就在获取DOM数据，这样子明显不合理，这算是证明之一。</p>
<p>来看段代码👇</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    setTimeout(( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>( <span class="string">&#x27;second&#x27;</span> );</span><br><span class="line">    &#125;),<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>打印结果就是首先是很多个first,然后再是second。</p>
<p>异步机制是浏览器的两个或以上常驻线程共同完成的，举个例子，比如异步请求由两个常驻线程，JS执行线程和事件触发线程共同完成的。</p>
<ul>
<li>JS执行线程发起异步请求（浏览器会开启一个HTTP请求线程来执行请求，这时JS的任务完成，继续执行线程队列中剩下任务）</li>
<li>然后在未来的某一时刻事件触发线程监视到之前的发起的HTTP请求已完成，它就会把完成事件插入到JS执行队列的尾部等待JS处理</li>
</ul>
<p>再比如定时器触发(settimeout和setinterval) 是由<strong>「浏览器的定时器线程」</strong>执行的定时计数，然后在定时时间把定时处理函数的执行请求插入到JS执行队列的尾端（所以用这两个函数的时候，实际的执行时间是大于或等于指定时间的，不保证能准确定时的）。</p>
<p>所以这么说，JS单线程与异步更多是浏览器行为，之间不冲突。</p>
<h2 id="7-CSS加载会造成阻塞吗"><a href="#7-CSS加载会造成阻塞吗" class="headerlink" title="7. CSS加载会造成阻塞吗"></a>7. CSS加载会造成阻塞吗</h2><p>先给出结论</p>
<ul>
<li><code>CSS</code>不会阻塞<code>DOM</code>解析，但会阻塞<code>DOM</code>渲染。</li>
<li><code>CSS</code>会阻塞JS执行，并不会阻塞JS文件下载</li>
</ul>
<p>先讲一讲CSSOM作用</p>
<ul>
<li>第一个是提供给 JavaScript 操作样式表的能力</li>
<li>第二个是为布局树的合成提供基础的样式信息</li>
<li>这个 CSSOM 体现在 DOM 中就是document.styleSheets。</li>
</ul>
<p>由之前讲过的浏览器渲染流程我们可以看出：</p>
<p>DOM 和 CSSOM通常是并行构建的，所以<strong>「CSS 加载不会阻塞 DOM 的解析」</strong>。</p>
<p>然而由于Render Tree 是依赖DOM Tree和 CSSOM Tree的，所以它必须等到两者都加载完毕后，完成相应的构建，才开始渲染，因此，<strong>「CSS加载会阻塞DOM渲染」</strong>。</p>
<p>由于 JavaScript 是可操纵 DOM 和 css 样式 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。</p>
<p>因此为了防止渲染出现不可预期的结果,浏览器设置 <strong>「GUI 渲染线程与 JavaScript 引擎为互斥」</strong>的关系。</p>
<p>有个需要注意的点就是：</p>
<p><strong>「有时候JS需要等到CSS的下载，这是为什么呢？」</strong></p>
<p>仔细思考一下，其实这样做是有道理的，如果脚本的内容是获取元素的样式，宽高等<code>CSS</code>控制的属性，浏览器是需要计算的，也就是依赖于<code>CSS</code>。浏览器也无法感知脚本内容到底是什么，为避免样式获取，因而只好等前面所有的样式下载完后，再执行<code>JS</code>。</p>
<p>JS文件下载和CSS文件下载是并行的，有时候CSS文件很大，所以JS需要等待。</p>
<p>因此,样式表会在后面的 js 执行前先加载执行完毕,所以<strong>「css 会阻塞后面 js 的执行」</strong>。</p>
<h2 id="8-为什么JS会阻塞页面加载"><a href="#8-为什么JS会阻塞页面加载" class="headerlink" title="8. 为什么JS会阻塞页面加载"></a>8. 为什么JS会阻塞页面加载</h2><p>先给出结论</p>
<ul>
<li><strong>「JS阻塞DOM解析」</strong>，也就会阻塞页面</li>
</ul>
<p>这也是为什么说JS文件放在最下面的原因，那为什么会阻塞DOM解析呢</p>
<p>你可以这样子理解：</p>
<blockquote>
<p>由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。</p>
<p>因此为了防止渲染出现不可预期的结果,浏览器设置 <strong>「GUI 渲染线程与 JavaScript 引擎为互斥」</strong>的关系。</p>
<p>当 JavaScript 引擎执行时 GUI 线程会被挂起,GUI 更新会被保存在一个队列中等到引擎线程空闲时立即被执行。</p>
<p>当浏览器在执行 JavaScript 程序的时候,GUI 渲染线程会被保存在一个队列中,直到 JS 程序执行完成,才会接着执行。</p>
<p>因此如果 JS 执行的时间过长,这样就会造成页面的渲染不连贯,导致页面渲染加载阻塞的感觉。</p>
</blockquote>
<p>另外，如果 JavaScript 文件中没有操作 DOM 相关代码，就可以将该 JavaScript 脚本设置为异步加载，通过 async 或 defer 来标记代码</p>
<h2 id="9-defer-和-async-的区别"><a href="#9-defer-和-async-的区别" class="headerlink" title="9. defer 和 async 的区别 ?"></a>9. defer 和 async 的区别 ?</h2><ul>
<li>两者都是异步去加载外部JS文件，不会阻塞DOM解析</li>
<li>Async是在外部JS加载完成后，浏览器空闲时，Load事件触发前执行，标记为async的脚本并不保证按照指定他们的先后顺序执行，该属性对于内联脚本无作用 (即没有<strong>「src」</strong>属性的脚本）。</li>
<li>defer是在JS加载完成后，整个文档解析完成后，触发 <code>DOMContentLoaded</code> 事件前执行，如果缺少 <code>src</code> 属性（即内嵌脚本），该属性不应被使用，因为这种情况下它不起作用</li>
</ul>
<h2 id="10-DOMContentLoaded-与-load-的区别"><a href="#10-DOMContentLoaded-与-load-的区别" class="headerlink" title="10. DOMContentLoaded 与 load 的区别 ?"></a>10. DOMContentLoaded 与 load 的区别 ?</h2><ul>
<li>DOMContentLoaded事件触发时：仅当DOM解析完成后，不包括样式表，图片等资源。</li>
<li>onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。</li>
</ul>
<p>那么也就是先DOMContentLoaded -&gt; load,那么在Jquery中，使用<img src="https://juejin.cn/equation?tex=(document).read(callback)%E7%9B%91%E5%90%AC%E7%9A%84%E5%B0%B1%E6%98%AFDOMContentLoaded%E4%BA%8B%E4%BB%B6%EF%BC%8C" alt="img">)(document).load(callback)监听的就是load事件。</p>
<p>那我们可以聊一聊它们与async和defer区别</p>
<blockquote>
<p>带async的脚本一定会在load事件之前执行，可能会在DOMContentLoaded之前或之后执行。</p>
</blockquote>
<ul>
<li>情况1： HTML 还没有被解析完的时候，async脚本已经加载完了，那么 HTML 停止解析，去执行脚本，脚本执行完毕后触发DOMContentLoaded事件</li>
<li>情况2： HTML 解析完了之后，async脚本才加载完，然后再执行脚本，那么在HTML解析完毕、async脚本还没加载完的时候就触发DOMContentLoaded事件</li>
</ul>
<blockquote>
<p>如果 script 标签中包含 defer，那么这一块脚本将不会影响 HTML 文档的解析，而是等到HTML 解析完成后才会执行。而 DOMContentLoaded 只有在 defer 脚本执行结束后才会被触发。</p>
</blockquote>
<ul>
<li>情况1：HTML还没解析完成时，defer脚本已经加载完毕，那么defer脚本将等待HTML解析完成后再执行。defer脚本执行完毕后触发DOMContentLoaded事件</li>
<li>情况2：HTML解析完成时，defer脚本还没加载完毕，那么defer脚本继续加载，加载完成后直接执行，执行完毕后触发DOMContentLoaded事件</li>
</ul>
<h2 id="11-为什么CSS动画比JavaScript高效"><a href="#11-为什么CSS动画比JavaScript高效" class="headerlink" title="11. 为什么CSS动画比JavaScript高效"></a>11. 为什么CSS动画比JavaScript高效</h2><p>我觉得这个题目说法上可能就是行不通，不能这么说，如果了解的话，都知道will-change只是一个优化的手段，使用JS改变transform也可以享受这个属性带来的变化，所以这个说法上有点不妥。</p>
<p>所以围绕这个问题展开话，更应该说建议推荐使用CSS动画，至于为什么呢，涉及的知识点大概就是重排重绘，合成，这方面的点，我在浏览器渲染流程中也提及了。</p>
<p>尽可能的避免重排和重绘，具体是哪些操作呢，如果非要去操作JS实现动画的话，有哪些优化的手段呢？</p>
<p>比如</p>
<ul>
<li>使用<code>createDocumentFragment</code>进行批量的 DOM 操作</li>
<li>对于 resize、scroll 等进行防抖/节流处理。</li>
<li>rAF优化等等</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>弹性布局是为了弥补流式布局下在移动端布局的不方便而产生的一种新的布局方式 ，它主要是通过<strong>弹性盒子</strong>这个特性来完成了</p>
<h3 id="弹性盒子属性"><a href="#弹性盒子属性" class="headerlink" title="弹性盒子属性"></a>弹性盒子属性</h3><ol>
<li><p><code>display:flex</code>这个属性将一个盒子转换成弹性盒子</p>
<ul>
<li>当一个元素一旦变成弹性盒子以后，这个元素里面就全有两根轴，一个叫横轴row,一个叫纵轴column</li>
<li>在刚刚产生的两根轴（row/column）里面，有一根是主轴(<strong>justify-content</strong>)与一根副轴(<strong>align-items</strong>)</li>
<li><font color="red">默认情况下是以row为主轴</font>,<strong>里面的元素会沿着主轴的方向去排列</strong></li>
</ul>
</li>
<li><p><code>flex-direction</code>设置元素的主轴</p>
<p>刚刚我们提过，元素一旦转换成弹性盒子以后，它默认就有两根轴row/column，同时row是它的默认主轴，我们可以通过<code>flex-direction</code>来改变盒子的主轴</p>
<ul>
<li><code>flex-direction:row</code>设置横向的为主轴</li>
<li><code>flex-direction:column</code>设置纵向的为主轴</li>
<li><code>flex-direction:row-reverse</code>设置反向的横轴为主轴</li>
<li><code>flex-direction:column-reverse</code>设置反向纵轴的为主轴</li>
</ul>
</li>
<li><p><code>justify-content</code>主轴布局排列</p>
<ul>
<li>center居中</li>
<li>flex-start 弹性开始的地方</li>
<li>flex-end弹性结束的地方</li>
<li>space-between用空格撑开，撑到两边去</li>
<li>space-around元素的左右两边用空格撑开</li>
</ul>
</li>
<li><p><code>align-items</code>副轴布局排列</p>
<ul>
<li><p>center居中</p>
</li>
<li><p>flex-start弹性开始的地方</p>
</li>
<li><p>flex-end弹性结束的地方</p>
</li>
<li><p>stretch当弹性盒子里面的元素没有设置高度height的时候，就把它拉成100%</p>
</li>
<li><p>baseline基准对对齐，当内部元素有padding的时候，就会看到效果</p>
<p><img src="https://img03.sogoucdn.com/app/a/100520146/aa4749128f118cdef9f6671c48647f8b" alt="1563689240668.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;  <span class="comment">/*变成弹性盒子*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;  <span class="comment">/*row是主轴*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*如果我现在想让里面的元素左右居中，那么，应该沿关row这根轴移动*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*justify-content: space-around;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: baseline;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-top</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>flex-wrap</code>弹性盒子内部是否允许换行</p>
</li>
</ol>
<ul>
<li><p>warp:当弹性盒子内部放不下的时候，允许换行</p>
</li>
<li><p>nowrap:弹性盒子内部不换行，默认排在一行，宽度不够则挤压</p>
</li>
<li><p>wrap-reverse：弹性盒子内部可以换行，但是要反转</p>
<p> 注意：当内部元素在主轴上面排列不下的时候，如果设置了换行，这个时候，就会出现多个主轴的情况，那么，现在就需要使用另一个属性(align-content)来设置了</p>
<p> <img src="https://img02.sogoucdn.com/app/a/100520146/17d2db4b0ce7a3fc5d246b0d8c9b1f21" alt="1563689958610.png"></p>
<p> 这三个div本来应该排列在一行的，现在排不下了，所以给一个<code>flex-wrap:wrap</code>以后，就会出现第二行</p>
</li>
</ul>
<ol>
<li><p>align-content，主轴出现折行以后在副轴上面的设置，如果主轴x，那么，该属性无效果</p>
</li>
<li><p>order调整弹性盒子内部的排列，该值默认为0，order从小到大沿着弹性的方向排列</p>
</li>
<li><p>flex属性</p>
<p><del>flex:1代表占用剩下空间的100%</del></p>
<p>占用当前的flex值/总的flex值</p>
</li>
<li><p>flex-flow：设置主轴并同时设置主轴是否允许折行</p>
<p>本质是面是flex-direction与flex-wrap的合并</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>title: 标题ss</p>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p> 浏览器的进程模型    </p>
<h4 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h4><p>​    程序运行需要自己的专属的内存空间，可以把这个内存空间简单理解成进程。</p>
<p>每个应用至少有一个进程，每个进程相互独立，即使要通信，也要双方同意。</p>
<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><p>有了进程之后，就可以运行程序的代码。</p>
<p>运行代码的“人” 称之为 线程。</p>
<p>一个进程至少有一个线程，所以进程开启后会自动创建一个线程来运行代码，该线程称为主线程。</p>
<p>如果程序要同事执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p>
<h4 id="浏览器有哪些进程和线程"><a href="#浏览器有哪些进程和线程" class="headerlink" title="浏览器有哪些进程和线程?"></a>浏览器有哪些进程和线程?</h4><pre><code>浏览器是一个多进程多线程的应用程序。</code></pre><p>​    为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。 </p>
<p>最主要的进程有：</p>
<p>​    1.<strong>浏览器进程</strong>：主要负责页面显示，用户交互，子进程管理（比如网络进程和渲染进程都是这个进程启动的）等。 浏览器进程内部会启动多个线程处理不同的任务。</p>
<pre><code>2**.网络进程**：负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</code></pre><p>​    3.<strong>渲染进程</strong>（重点）：渲染进程启动后，会开启一个<strong>渲染主线程</strong>，负责执行HTML、CSS、JS代码。默认情况下浏览器会给<strong>每个标签页开启一个新的渲染进程</strong>，保证不同标签页之间不相互影响。将来可能改成一个站点一个进程。</p>
<h4 id="渲染主线程是如何工作的？"><a href="#渲染主线程是如何工作的？" class="headerlink" title="渲染主线程是如何工作的？"></a>渲染主线程是如何工作的？</h4><pre><code>* 解析html
* 解析css
* 计算样式
* 布局
* 处理图层
* 每秒把页面画 60 次
* 执行全局 js 代码
* 执行时间处理函数
* 执行计时器的回调函数
* ......</code></pre><ol>
<li>在最开始 的时候，渲染主线程会进入一个无限循环。</li>
<li>每一次循环都会检查消息队列中是否有任务存在，如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li>
</ol>
<p>​    3.其他所有线程（包括其他进程的线程）可以随时消息队列中添加任务。新任务会加到队列的末尾。</p>
<p><strong>这整个过程被称为事件循环（消息循环）。</strong></p>
<h4 id="何为异步？"><a href="#何为异步？" class="headerlink" title="何为异步？"></a>何为异步？</h4><p>​    代码在执行的过程中，会遇到一些无法立即处理的任务。比如：</p>
<ul>
<li>计时完成后需要执行的任务  –  <code>setTimeout</code> 、<code>setInterval</code></li>
<li>网络通信完成后需要执行的任务 – <code>XHR</code>  、 <code>Fetch</code></li>
<li>用户操作后需要执行的任务 – <code>addEventListentener</code></li>
</ul>
<blockquote>
<p>面试题：如何理解JS的异步？</p>
<p>答案： JS是一门单线程的语言，这是<strong>因为它运行在浏览器的渲染主线程中</strong>，而渲染主线程只有一个。 而渲染主线程有很多任务，渲染页面，执行JS都在其中。如果使用同步的方式，极有可能导致主线程阻塞，从而导致消息队列中有很多其他任务无法得到执行。所以浏览器采用异步的方式来避免。具体的做法是 当某些任务发生时，比如计时器，网络，事件监听，主线程会将任务交给其他线程去处理，自身则立即结束任务的执行，转而执行后续的代码。当其他线程完成时，<strong>会把事先传递的回调函数包装成任务</strong>，加入到消息队列中的末尾排队，等待主线程的调度执行。在这种模式下浏览器永不阻塞，从而最大保证了单线程的流畅运行。</p>
</blockquote>
<pre><code>#### JS为何会阻塞渲染？</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> h1 = doucument.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 死循环指定时间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">duration</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - start &lt; duration) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		h1.<span class="property">textContent</span> = <span class="string">&#x27;你好&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">delay</span>(<span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这段代码的现象： 点击按钮后，页面等待3秒才会更新渲染。</p>
<p>原因：因为渲染和js的执行都在渲染主线程中，当代码执行 <code>h1.textContent = &#39;你好&#39;</code> 后会创建一个渲染任务进入消息队列等待执行。只有等主线程执行完，才会执行接下来的渲染任务。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="移动端布局基础"><a href="#移动端布局基础" class="headerlink" title="移动端布局基础"></a>移动端布局基础</h2><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>一个页面针对不同的设备不同的<strong>宽度</strong>做出的不同样式布局响应</p>
<p>在整个移动端布局里面，我们都需添加如下的网页头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么现在我们就可以根据网页的宽度来进行响应了</p>
<h3 id="响应式布局实现原理"><a href="#响应式布局实现原理" class="headerlink" title="响应式布局实现原理"></a>响应式布局实现原理</h3><hr>
<p>它的原理主要是对CSS里面的一个命令来完成，这个命令叫<strong>媒体查询</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>响应式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="comment">/*当屏幕设备在0~500px之间的时候，所使用的CSS样式*/</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">0px</span>)&#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			今天天气真热，感觉要下雨了</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要求：我希望这个网页如果在屏幕大于500px的时候里面的字体就显示为红色 ，否则就显示会蓝色--&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的CSS里面，我们可以看到有一个新的CSS命令<code>@media only screen</code>在这里是查询屏幕设备，后面的<code>and (max-width:500px) and (min-width:0px)</code>指这个地方的限制范围</p>
<p>后面的<code>and (min-width:0px)</code>我们可以省略掉</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">500px</span> ) &#123;</span><br><span class="line">    <span class="selector-class">.div1</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个时候，我们指定了最大值，但是没有指定最小值，那么，最小值默认就是0px</p>
</blockquote>
<h4 id="屏幕的划分"><a href="#屏幕的划分" class="headerlink" title="屏幕的划分"></a>屏幕的划分</h4><ul>
<li>手机（0px~768px）</li>
<li>平板（769px~990px）</li>
<li>PC（991px~1200px)</li>
<li>大型PC（投影仪，高分屏显示器）(1201px以上的)</li>
</ul>
<h4 id="文字响应式"><a href="#文字响应式" class="headerlink" title="文字响应式"></a>文字响应式</h4><p>请看下面案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>文字响应式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1201px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">991px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">769px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">990px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			我要实现文字响应式</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	我希望上面的文字在下面的四种设置下面设置不同的字体大小</span></span><br><span class="line"><span class="comment">	- 手机（0px~768px）                              			12px</span></span><br><span class="line"><span class="comment">	- 平板（769px~990px）						20px</span></span><br><span class="line"><span class="comment">	- PC（991px~1200px)						30px</span></span><br><span class="line"><span class="comment">	- 大型PC（投影仪，高分屏显示器）(1201px以上的)	40px</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p> 通过上面的案例，我们可以看到文字在不同的设备下面实现了不同的响应效果，但是仍然有不足</p>
<p>我们可以通过上面的方式设置一个盒子里面的文字效果，但是如果整个网页都需要实现这样的标准怎么办呢？</p>
<hr>
<p> 我们之前在学习<code>font-size</code>的属性的时候，学过一个属性值叫<code>rem</code>, 这个是响应式单位</p>
<p>rem指的是root element网页的根元素html ,而html网页默认的字体大小是16px</p>
<p>默认1rem=16px，我们可以通过一个像这样的特性来完成响应式网页的字体的设置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>文字响应式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1201px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">991px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">769px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">990px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">font-size</span>: <span class="number">4.8px</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div4</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			我要实现文字响应式</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">			我要实现文字响应式123123213</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">			我要实现文字响应式aaaaaa</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div4&quot;</span>&gt;</span></span><br><span class="line">			我不希望实现文字响应</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	我希望上面的文字在下面的四种设置下面设置不同的字体大小</span></span><br><span class="line"><span class="comment">	- 手机（0px~768px）                              			12px</span></span><br><span class="line"><span class="comment">	- 平板（769px~990px）						20px</span></span><br><span class="line"><span class="comment">	- PC（991px~1200px)						30px</span></span><br><span class="line"><span class="comment">	- 大型PC（投影仪，高分屏显示器）(1201px以上的)	40px</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如果一段文字没有限范围的改变，只是需要让它随着设备变大变小，那么，我们可以使用另一种单位，叫<code>vw</code>或<code>vh</code></p>
<p> vw: viewport width，1vw 代表设备宽度的1%</p>
<p>这一种情况不需要借助于媒体查询，因为它没有限定范围</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>字体响应式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/*如果现在我想设置12px*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">3.2vw</span>;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*以iphone6为标准</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                12px/375(iphon6的宽度)*100=3.2</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                */</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			我要随着页面改变字体大小</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="图片响应式处理"><a href="#图片响应式处理" class="headerlink" title="图片响应式处理"></a>图片响应式处理</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>字体响应式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">max-width</span>: <span class="number">1600px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/*第一步*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/*第二步*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.div1</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/*由宽度自动的撑开高度*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">991px</span> ) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">990px</span> ) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">769px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span> ) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-class">.div1</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				&#125;	</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1 clearfix&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item1.jpg&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item2.jpg&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item3.jpg&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/item4.jpg&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	放四张图片，</span></span><br><span class="line"><span class="comment">	在PC，一排四个</span></span><br><span class="line"><span class="comment">	在平板，一排两个</span></span><br><span class="line"><span class="comment">	在手机，一排</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>原理：div限定图片宽度，图片自已再撑开高度height:auto,再通过这个高度反向的再撑开外边的div的高度。然后再通过媒体查询去确定最终这个div在不同设备的width</p>
</blockquote>
<h3 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/18/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="移动端布局注意事项"><a href="#移动端布局注意事项" class="headerlink" title="移动端布局注意事项"></a>移动端布局注意事项</h2><h3 id="手机屏的横向与纵向"><a href="#手机屏的横向与纵向" class="headerlink" title="手机屏的横向与纵向"></a>手机屏的横向与纵向</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*手机横向*/</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>:landscape ) &#123;</span><br><span class="line">    <span class="comment">/*css代码*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*手机纵向*/</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>:portrait ) &#123;</span><br><span class="line">	<span class="comment">/*css代码*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IOS中设置手机的桌面图标"><a href="#IOS中设置手机的桌面图标" class="headerlink" title="IOS中设置手机的桌面图标"></a>IOS中设置手机的桌面图标</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;img/kabao.png&quot;</span> /&gt;</span>		</span><br></pre></td></tr></table></figure>

<h3 id="苹果浏览器启用全屏模式"><a href="#苹果浏览器启用全屏模式" class="headerlink" title="苹果浏览器启用全屏模式"></a>苹果浏览器启用全屏模式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="苹果浏览器状态栏颜色设置"><a href="#苹果浏览器状态栏颜色设置" class="headerlink" title="苹果浏览器状态栏颜色设置"></a>苹果浏览器状态栏颜色设置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="网页中禁止识别手机号"><a href="#网页中禁止识别手机号" class="headerlink" title="网页中禁止识别手机号"></a>网页中禁止识别手机号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>部分安卓手机不需要这个设置，默认不会识别手机号</p>
</blockquote>
<h3 id="网页中禁止识别邮箱"><a href="#网页中禁止识别邮箱" class="headerlink" title="网页中禁止识别邮箱"></a>网页中禁止识别邮箱</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;email=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：新机型已不用设置（ios8以下，安卓4.4以下）</p>
</blockquote>
<h3 id="网页中调起拔号键盘"><a href="#网页中调起拔号键盘" class="headerlink" title="网页中调起拔号键盘"></a>网页中调起拔号键盘</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:18627101111&quot;</span>&gt;</span>点击拔打电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="网页中调起邮件发送功能"><a href="#网页中调起邮件发送功能" class="headerlink" title="网页中调起邮件发送功能"></a>网页中调起邮件发送功能</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:love****i@163.com&quot;</span>&gt;</span>点击给我发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="a标签点击时取消高光效果"><a href="#a标签点击时取消高光效果" class="headerlink" title="a标签点击时取消高光效果"></a>a标签点击时取消高光效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IOS输入框首字母英文大写的问题"><a href="#IOS输入框首字母英文大写的问题" class="headerlink" title="IOS输入框首字母英文大写的问题"></a>IOS输入框首字母英文大写的问题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocapitalize</span>=<span class="string">&quot;off&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IOS覆盖默认的按钮样式问题"><a href="#IOS覆盖默认的按钮样式问题" class="headerlink" title="IOS覆盖默认的按钮样式问题"></a>IOS覆盖默认的按钮样式问题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span>&#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="QQ浏览器特有标识"><a href="#QQ浏览器特有标识" class="headerlink" title="QQ浏览器特有标识"></a>QQ浏览器特有标识</h3><ol>
<li><p>启用全屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用app应用模式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强制竖屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强制横屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="UC浏览器特有标识"><a href="#UC浏览器特有标识" class="headerlink" title="UC浏览器特有标识"></a>UC浏览器特有标识</h3><ol>
<li><p>启用全屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用app应用模式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强制竖屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强制横屏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="禁止复制选中文本"><a href="#禁止复制选中文本" class="headerlink" title="禁止复制选中文本"></a>禁止复制选中文本</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  -khtml-user-select: none;</span><br><span class="line">   user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IOS屏幕旋转时，字体大小调整的问题"><a href="#IOS屏幕旋转时，字体大小调整的问题" class="headerlink" title="IOS屏幕旋转时，字体大小调整的问题"></a>IOS屏幕旋转时，字体大小调整的问题</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">p</span>, <span class="selector-tag">div</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  -webkit-text-size-adjust:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="禁用缓存"><a href="#禁用缓存" class="headerlink" title="禁用缓存"></a>禁用缓存</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明</strong>：手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置<code>no-cache</code>。 </p>
</blockquote>
<h3 id="禁用IOS文本输入框默认内阴影"><a href="#禁用IOS文本输入框默认内阴影" class="headerlink" title="禁用IOS文本输入框默认内阴影"></a>禁用IOS文本输入框默认内阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
